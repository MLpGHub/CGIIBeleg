#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
%fuer codelistings:
\definecolor{lightergray}{rgb}{0.90, 0.90, 0.90} 
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1.5cm
\topmargin 1.5cm
\rightmargin 1.5cm
\bottommargin 1.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style german
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Belegarbeit Teil I
\begin_inset Newline newline
\end_inset

zur Veranstaltung Computergrafik und Visualisierung II
\end_layout

\begin_layout Author
Günther, Emanuel s76954 - Leopold, Michael s76904
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Namen ergänzen :)
\end_layout

\end_inset


\end_layout

\begin_layout Date
SoSe 2019
\end_layout

\begin_layout Section
Aufgabenstellung
\end_layout

\begin_layout Enumerate

\series bold
Vektor2D und Vektor3D 
\series default
[10 Punkte]
\series bold

\begin_inset Newline newline
\end_inset


\series default
Erstellen Sie die zwei Klassen 
\family typewriter
Vektor2D
\family default
 und 
\family typewriter
Vektor3D
\family default
, die entsprechend 2D- oder 3D-Vektoren repräsentieren können.
 Die Koordinaten werden jeweils durch 
\family typewriter
double
\family default
 repräsentiert.
 Weiterhin sollen sinnvolle Hilfsmethoden angeboten werden.
 Es sind mindestens die folgenden Funktionen (nachweislich) testgetrieben
 zu implementieren: 
\family typewriter
setPosition
\family default
, 
\family typewriter
isNullVector
\family default
, 
\family typewriter
add
\family default
, 
\family typewriter
sub
\family default
, 
\family typewriter
mult
\family default
, 
\family typewriter
div
\family default
, 
\family typewriter
isEqual
\family default
, 
\family typewriter
isNotEqual
\family default
, 
\family typewriter
length
\family default
 und 
\family typewriter
normalize
\family default
.
 Dokumentieren Sie Ihre Entwicklung mittels Test-Driven-Development in geeignete
r Weise.
\end_layout

\begin_layout Enumerate

\series bold
Lineare Algebra 
\series default
[20 Punkte]
\series bold

\begin_inset Newline newline
\end_inset


\series default
Schreiben Sie eine Klasse 
\family typewriter
LineareAlgebra
\family default
, die folgende Methoden (für 2D und 3D) zur Verfügung stellt: 
\family typewriter
add
\family default
, 
\family typewriter
sub
\family default
, 
\family typewriter
mult
\family default
, 
\family typewriter
div
\family default
, 
\family typewriter
isEqual
\family default
, 
\family typewriter
isNotEqual
\family default
, 
\family typewriter
length
\family default
, 
\family typewriter
normalize
\family default
, 
\family typewriter
euklDistance
\family default
, 
\family typewriter
manhattanDistance
\family default
, 
\family typewriter
crossProduct
\family default
, 
\family typewriter
dotProduct
\family default
, 
\family typewriter
cosEquation, sinEquation, angleRad
\family default
, 
\family typewriter
angleDegree
\family default
, 
\family typewriter
radToDegree
\family default
, 
\family typewriter
degreeToRad
\family default
, 
\family typewriter
determinante
\family default
, 
\family typewriter
abs
\family default
 und 
\family typewriter
show
\family default
.
 Auch hier soll die Entwicklung testgetrieben erfolgen.
 
\end_layout

\begin_layout Section
Lösung
\end_layout

\begin_layout Standard
Die vollständigen Lösungen wurden per Email abgegeben.
 Hier ein Auszug der relevanten Abschnitte zu den Klassen 
\family typewriter
Vektor2D
\family default
, 
\family typewriter
Vektor3D
\family default
 und 
\family typewriter
LineareAlgebra
\family default
.
\end_layout

\begin_layout Subsection
Klasse Vektor3D
\end_layout

\begin_layout Standard
Um den Zugriff auf die Variablen zu vereinfachen wurden hier auf die get-
 und set-Methoden verzichtet:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize\ttfamily},showstringspaces=false,tabsize=3,backgroundcolor={\color{lightergray}},frame=single,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

public class Vektor3D {
\end_layout

\begin_layout Plain Layout

	public float x, y, z;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Verschachtelte Konstrukturen wurden angelegt, um Redundanz zu vermeiden:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize\ttfamily},showstringspaces=false,tabsize=3,backgroundcolor={\color{lightergray}},frame=single,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

	public Vektor3D() {
\end_layout

\begin_layout Plain Layout

		this(0, 0, 0);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public Vektor3D(float x, float y, float z) {
\end_layout

\begin_layout Plain Layout

		this.x=x;
\end_layout

\begin_layout Plain Layout

		this.y=y;
\end_layout

\begin_layout Plain Layout

		this.z=z;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public Vektor3D(Vektor3D vec) {
\end_layout

\begin_layout Plain Layout

		this(vec.x, vec.y, vec.z);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Ausgewählte Methode: length
\end_layout

\begin_layout Standard
Alle Methoden wurden unter Einbeziehung der des vorgestellten Konzepts des
 Test-Driven-Developments entwickelt.
 Die Methode 
\family typewriter
length
\family default
 wurde ausgewählt, um das Vorgehen zu verdeutlichen.
\end_layout

\begin_layout Standard
Die Länge oder Magnitude eines Vektors 
\begin_inset Formula $\vec{v}$
\end_inset

, symbolisiert durch 
\begin_inset Formula $\left\Vert \circ\right\Vert $
\end_inset

, ergibt sich aus
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
length(\vec{v})=\left\Vert \vec{v}\right\Vert =\sqrt{v_{1}^{2}+v_{2}^{2}+\ldots+v_{n}^{2}}
\]

\end_inset


\end_layout

\begin_layout Standard
und liefert einen Skalar 
\begin_inset CommandInset citation
LatexCommand cite
key "block 2019"
literal "true"

\end_inset

.
 Dem Längenmaß eines Vektors liegt der euklidische Abstand zu Grunde.
 
\end_layout

\begin_layout Standard
Die Implementierung können wir direkt vornehmen:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightergray}},basicstyle={\scriptsize\ttfamily},frame=single,language=Java,numbers=left,showstringspaces=false,tabsize=3,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

public static float length(Vektor3D vec){
\end_layout

\begin_layout Plain Layout

   return (float)Math.sqrt(vec.x*vec.x + vec.y*vec.y + vec.z*vec.z);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Ausgewählte Methode: subUnderflow3DTest()
\end_layout

\begin_layout Standard
Diese Funktion testet das Verhalten der Vektor3D Klasse bei dem untererschreiten
 der minimal möglichen Wertannahme (Double.MIN_Value).
 Sie gibt ausschlus darüber ob und wie wir mit einem möglicheweiße auftretenden
 
\begin_inset Quotes gld
\end_inset

Wrap-Around
\begin_inset Quotes grd
\end_inset

 umgehen würden.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

@Test(expected = Exception.class) 	
\end_layout

\begin_layout Plain Layout

void subUnderflow3DTest() throws Exception { 		
\end_layout

\begin_layout Plain Layout

	Vektor3D v = new Vektor3D(Double.MIN_VALUE, Double.MIN_VALUE,Double.MIN_VALUE);
 
\end_layout

\begin_layout Plain Layout

	v.sub(v); 	
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Klasse Vektor2D
\end_layout

\begin_layout Subsubsection
Ausgewählte Methode: manhattenDistance()
\end_layout

\begin_layout Standard
Die Methode 
\begin_inset Quotes gld
\end_inset

manhattenDistance()
\begin_inset Quotes grd
\end_inset

 ist eine Auswahl unter vielen, die zeigt, dass wir unseren Code Style stets
 klein und Ressourceneffizeint halten.
 Minimalistisch und Laufzeiteffizient indem möglichst wenige Aufrufe und
 Bedingungen auftreten.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public static double manhattenDistance(Vektor2D v) { 		
\end_layout

\begin_layout Plain Layout

return Math.abs(v.x) + Math.abs(v.y); }
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die Manhatten Distance lässt sich mittels eine symbolischen Skizze (Abb.1)
 gut veranschaulichen.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Formula 
\[
d(p,q)=\sum_{i}\mathord{|p_{i}-q_{i}|}
\]

\end_inset


\end_layout

\begin_layout Subsubsection
Ausgewählte Methode: normalizeCalculation2DTest()
\end_layout

\begin_layout Standard
Die Methode 
\begin_inset Quotes gld
\end_inset

normalizeCalculation2DTest
\begin_inset Quotes grd
\end_inset

 ist beispielhaft für den Weg der allgemeinen Exceptionüberprüfung, den
 wir gewählt haben.
 In simplen aber präzisen try/catch- Anweisungen fangen wir übliche Fehlerquelle
n ab und teilen sie dem Anwender mit.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

@Test 	
\end_layout

\begin_layout Plain Layout

void normalizeCalculation2DTest() { 		
\end_layout

\begin_layout Plain Layout

	Vektor2D v = new Vektor2D(1, 4); 		
\end_layout

\begin_layout Plain Layout

	try { 			
\end_layout

\begin_layout Plain Layout

		v.normalize();
\end_layout

\begin_layout Plain Layout

	}catch (Exception e) {
\end_layout

\begin_layout Plain Layout

		System.out.println(e.getMessage());
\end_layout

\begin_layout Plain Layout

		assert(false); 
\end_layout

\begin_layout Plain Layout

	 } 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Lineare Algebra
\end_layout

\begin_layout Subsubsection
Ausgewählte Methode:
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "block 2019"
literal "true"

\end_inset

Block-Berlitz M.: 
\begin_inset Quotes eld
\end_inset


\emph on
Warum sich der Dino furchtbar erschreckte - Lehrbuch zu Beleuchtung und
 Rendering mit Java, LWJGL, OpenGL und GLSL
\emph default

\begin_inset Quotes erd
\end_inset

, vividus Wissenschaftsverlag, 2019 (to appear :) )
\end_layout

\end_body
\end_document
