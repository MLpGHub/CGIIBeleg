#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
%fuer codelistings:
\definecolor{lightergray}{rgb}{0.90, 0.90, 0.90} 
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1.5cm
\topmargin 1.5cm
\rightmargin 1.5cm
\bottommargin 1.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style german
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Belegarbeit Teil I
\begin_inset Newline newline
\end_inset

zur Veranstaltung Computergrafik und Visualisierung II
\end_layout

\begin_layout Author
Günther, Emanuel s76954 - Leopold, Michael s76904
\end_layout

\begin_layout Date
SoSe 2019
\end_layout

\begin_layout Section
Aufgabenstellung
\end_layout

\begin_layout Enumerate

\series bold
Vektor2D und Vektor3D 
\series default
[10 Punkte]
\series bold

\begin_inset Newline newline
\end_inset


\series default
Erstellen Sie die zwei Klassen 
\family typewriter
Vektor2D
\family default
 und 
\family typewriter
Vektor3D
\family default
, die entsprechend 2D- oder 3D-Vektoren repräsentieren können.
 Die Koordinaten werden jeweils durch 
\family typewriter
double
\family default
 repräsentiert.
 Weiterhin sollen sinnvolle Hilfsmethoden angeboten werden.
 Es sind mindestens die folgenden Funktionen (nachweislich) testgetrieben
 zu implementieren: 
\family typewriter
setPosition
\family default
, 
\family typewriter
isNullVector
\family default
, 
\family typewriter
add
\family default
, 
\family typewriter
sub
\family default
, 
\family typewriter
mult
\family default
, 
\family typewriter
div
\family default
, 
\family typewriter
isEqual
\family default
, 
\family typewriter
isNotEqual
\family default
, 
\family typewriter
length
\family default
 und 
\family typewriter
normalize
\family default
.
 Dokumentieren Sie Ihre Entwicklung mittels Test-Driven-Development in geeignete
r Weise.
\end_layout

\begin_layout Enumerate

\series bold
Lineare Algebra 
\series default
[20 Punkte]
\series bold

\begin_inset Newline newline
\end_inset


\series default
Schreiben Sie eine Klasse 
\family typewriter
LineareAlgebra
\family default
, die folgende Methoden (für 2D und 3D) zur Verfügung stellt: 
\family typewriter
add
\family default
, 
\family typewriter
sub
\family default
, 
\family typewriter
mult
\family default
, 
\family typewriter
div
\family default
, 
\family typewriter
isEqual
\family default
, 
\family typewriter
isNotEqual
\family default
, 
\family typewriter
length
\family default
, 
\family typewriter
normalize
\family default
, 
\family typewriter
euklDistance
\family default
, 
\family typewriter
manhattanDistance
\family default
, 
\family typewriter
crossProduct
\family default
, 
\family typewriter
dotProduct
\family default
, 
\family typewriter
cosEquation, sinEquation, angleRad
\family default
, 
\family typewriter
angleDegree
\family default
, 
\family typewriter
radToDegree
\family default
, 
\family typewriter
degreeToRad
\family default
, 
\family typewriter
determinante
\family default
, 
\family typewriter
abs
\family default
 und 
\family typewriter
show
\family default
.
 Auch hier soll die Entwicklung testgetrieben erfolgen.
 
\end_layout

\begin_layout Section
Lösung
\end_layout

\begin_layout Standard
Die vollständigen Lösungen wurden per Email abgegeben.
 Hier ein Auszug der relevanten Abschnitte zu den Klassen 
\family typewriter
Vektor2D
\family default
, 
\family typewriter
Vektor3D
\family default
 und 
\family typewriter
LineareAlgebra
\family default
.
\end_layout

\begin_layout Standard
Die Lösung wurde in 
\family typewriter
Eclipse 2019-03
\family default
 unter Zuhilfenahme von 
\family typewriter
JUnit 5
\family default
 entwickelt und getestet.
\end_layout

\begin_layout Subsection
Klasse DRechnung
\end_layout

\begin_layout Standard
Um die Überprüfungen bei Berechnungen mit dem primitiven Datentyp 
\family typewriter
double
\family default
 zu bündeln, wurden die Berechnungen von Summen, Differenzen, Produkten
 und Quotienten in die Klasse 
\family typewriter
DRechnung
\family default
 ausgelagert.
 Dort sind sie als statische Methoden verfügbar.
 Weiterhin sind die größte und die kleinste mit dem Datentyp 
\family typewriter
double
\family default
 darstellbare Zahl als Konstanten 
\family typewriter
MIN
\family default
 und 
\family typewriter
MAX
\family default
 vorhanden.
\end_layout

\begin_layout Standard
Beispielhaft für die testgetriebene Entwicklung soll die Methode 
\family typewriter
add()
\family default
 vorgestellt werden.
 Der folgende Test überprüft eine einfache Berechnung einer Summe.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize\ttfamily},tabsize=4,backgroundcolor={\color[rgb]{0.8588,1,0.7333}},frame=single,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

@Test
\end_layout

\begin_layout Plain Layout

public void addDRTest() throws Exception {
\end_layout

\begin_layout Plain Layout

	double a = 5;
\end_layout

\begin_layout Plain Layout

	double b = 8;
\end_layout

\begin_layout Plain Layout

	assert (DRechnung.add(a, b) == 13); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die daraufhin entwickelte Implentierung sieht wiefolgt aus:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize\ttfamily},tabsize=4,backgroundcolor={\color[rgb]{0.8588,1,0.7333}},frame=single,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

public static double add(double a, double b) {
\end_layout

\begin_layout Plain Layout

 	return a + b; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Als nächstes wird eine Überprüfung auf double Overflow hinzugefügt.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize\ttfamily},tabsize=4,backgroundcolor={\color[rgb]{0.8588,1,0.7333}},frame=single,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

@Test 
\end_layout

\begin_layout Plain Layout

public void addOverflowDRTest() {
\end_layout

\begin_layout Plain Layout

	double a = DRechnung.MAX;
\end_layout

\begin_layout Plain Layout

	double b = 8;
\end_layout

\begin_layout Plain Layout

	Assertions.assertThrows(Exception.class, () -> {
\end_layout

\begin_layout Plain Layout

		DRechnung.add(a, b); 
\end_layout

\begin_layout Plain Layout

	}); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Es folgt die Implementierung:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize\ttfamily},tabsize=4,backgroundcolor={\color[rgb]{0.8588,1,0.7333}},frame=single,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

public static double add(double a, double b) throws Exception {
\end_layout

\begin_layout Plain Layout

	if ((a > 0) && (b > MAX - a)) {
\end_layout

\begin_layout Plain Layout

		throw new Exception("Double Overflow");
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return a + b; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Zuletzt wird auf double Unterflows getestet.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize\ttfamily},tabsize=4,backgroundcolor={\color[rgb]{0.8588,1,0.7333}},frame=single,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

@Test 
\end_layout

\begin_layout Plain Layout

public void addUnderflowDRTest() {
\end_layout

\begin_layout Plain Layout

	double a = DRechnung.MIN;
\end_layout

\begin_layout Plain Layout

	double b = -5;
\end_layout

\begin_layout Plain Layout

	Assertions.assertThrows(Exception.class, () -> {
\end_layout

\begin_layout Plain Layout

		DRechnung.add(a, b);
\end_layout

\begin_layout Plain Layout

	});
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die finale Implementierung sieht wiefolgt aus:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize\ttfamily},tabsize=4,backgroundcolor={\color[rgb]{0.8588,1,0.7333}},frame=single,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

public static double add(double a, double b) throws Exception {
\end_layout

\begin_layout Plain Layout

	if ((a > 0) && (b > MAX - a)) {
\end_layout

\begin_layout Plain Layout

		throw new Exception("Double Overflow");
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	if ((a < 0) && (b < MIN - a)) {
\end_layout

\begin_layout Plain Layout

		throw new Exception("Double Underflow");
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return a + b;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Klasse Vektor3D
\end_layout

\begin_layout Standard
Um den Zugriff auf die Variablen zu vereinfachen, wurden hier auf die get-
 und set-Methoden verzichtet:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize\ttfamily},tabsize=4,backgroundcolor={\color[rgb]{0.8588,1,0.7333}},frame=single,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

public class Vektor3D {
\end_layout

\begin_layout Plain Layout

	public double x, y, z;
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Verschachtelte Konstrukturen wurden angelegt, um Redundanz zu vermeiden:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize\ttfamily},tabsize=4,backgroundcolor={\color[rgb]{0.8588,1,0.7333}},frame=single,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

public Vektor3D() {
\end_layout

\begin_layout Plain Layout

	this(0, 0, 0);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public Vektor3D(double x, double y, double z) {
\end_layout

\begin_layout Plain Layout

	this.x = x;
\end_layout

\begin_layout Plain Layout

	this.y = y;
\end_layout

\begin_layout Plain Layout

	this.z = z;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public Vektor3D(Vektor3D src) {
\end_layout

\begin_layout Plain Layout

	this(src.x, src.y, src.z);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Ausgewählte Methode: 
\family typewriter
length()
\end_layout

\begin_layout Standard
Die Länge oder Magnitude eines Vektors 
\begin_inset Formula $\vec{p}$
\end_inset

, symbolisiert durch 
\begin_inset Formula $\left\Vert \circ\right\Vert $
\end_inset

, ergibt sich aus
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
length(\vec{p})=\left\Vert \vec{p}\right\Vert =\sqrt{p_{1}^{2}+p_{2}^{2}+\ldots+p_{n}^{2}}
\]

\end_inset


\end_layout

\begin_layout Standard
und liefert einen Skalar.
 Dem Längenmaß eines Vektors liegt der euklidische Abstand zu Grunde.
 Eine grafische Darstellung der Länge eines Vektors findet sich in der Abbildung
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Vektorlänge"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Vektorlänge"

\end_inset

Die Länge eines dreidimensionalen Vektors.
\begin_inset Graphics
	filename img/vektorlaenge.png
	lyxscale 10
	scale 75

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ein erster Test für die Berechnung der Länge eines Vektors ist nachfolgend
 zu finden:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize\ttfamily},showstringspaces=false,tabsize=3,backgroundcolor={\color[rgb]{0.8588,1,0.7333}},frame=single,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

@Test
\end_layout

\begin_layout Plain Layout

public void lengthCalculation3DTest() {
\end_layout

\begin_layout Plain Layout

	Vektor3D v = new Vektor3D(3, 4, 0);
\end_layout

\begin_layout Plain Layout

	double l = v.length();
\end_layout

\begin_layout Plain Layout

	assert (l == 5);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die dazugehörige Implementierung sieht wiefolgt aus:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize\ttfamily},showstringspaces=false,tabsize=3,backgroundcolor={\color[rgb]{0.8588,1,0.7333}},frame=single,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

public double length() {
\end_layout

\begin_layout Plain Layout

	return Math.sqrt(x*x + y*y + z*z);  
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Bei der Berechnung von Quadratzahlen und deren Summierung können schnell
 zu double Overflows auftreten.
 Der folgende Test führt eine Überprüfung dessen durch:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize\ttfamily},showstringspaces=false,tabsize=3,backgroundcolor={\color[rgb]{0.8588,1,0.7333}},frame=single,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

@Test 
\end_layout

\begin_layout Plain Layout

public void lengthOverflow3DTest() {
\end_layout

\begin_layout Plain Layout

	Vektor3D v = new Vektor3D(DRechnung.MAX, 3, 4);
\end_layout

\begin_layout Plain Layout

	Assertions.assertThrows (Exception.class, () -> {
\end_layout

\begin_layout Plain Layout

		v.length();
\end_layout

\begin_layout Plain Layout

	});
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die Implementierung der Overflow-Überprüfung ist jedoch nicht besonders
 schwer.
 Denn für die Berechnungen der Methode 
\family typewriter
length()
\family default
 können die Methoden aus der Klasse 
\family typewriter
DRechnung
\family default
 genutzt werden, die schon auf double Overflows überprüfen.
 Der Quellcode dafür sieht wiefolgt aus:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize\ttfamily},showstringspaces=false,tabsize=3,backgroundcolor={\color[rgb]{0.8588,1,0.7333}},frame=single,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

@Test public double length() throws Exception {
\end_layout

\begin_layout Plain Layout

	double x2 = DRechnung.mult(this.x, this.x);
\end_layout

\begin_layout Plain Layout

	double y2 = DRechnung.mult(this.y, this.y);
\end_layout

\begin_layout Plain Layout

	double z2 = DRechnung.mult(this.z, this.z);
\end_layout

\begin_layout Plain Layout

	double x2y2 = DRechnung.add(x2, y2);
\end_layout

\begin_layout Plain Layout

	return Math.sqrt(DRechnung.add(x2y2, z2));
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Klasse Vektor2D
\end_layout

\begin_layout Standard
Auch in der Klasse 
\family typewriter
Vektor2D
\family default
 wurden Vereinfachungen für ein einfacheres Arbeiten vorgenommen.
 Sie sind äquivalent zu den Vereinfachungen bei der Klasse 
\family typewriter
Vektor3D
\family default
.
\end_layout

\begin_layout Subsubsection
Ausgewählte Methode: 
\family typewriter
normalize()
\end_layout

\begin_layout Standard
Die Methode 
\family typewriter
normalize()
\family default
 ist eine Auswahl unter vielen, die zeigt, dass wir unseren Code Style stets
 klein und Ressourceneffizeint halten.
 Minimalistisch und Laufzeiteffizient indem möglichst wenige Aufrufe und
 Bedingungen auftreten.
\end_layout

\begin_layout Standard
Die Normierung eines Vektors lässt sich wiefolgt beschreiben:
\begin_inset Formula 
\[
norm(\vec{p})=\left(\begin{array}{c}
p_{x}/length(\vec{p})\\
p_{y}/length(\vec{p})
\end{array}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
Ein erster Test zur Normierung eines zweidimensionalen Vektors sieht wiefolgt
 aus:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize\ttfamily},tabsize=4,backgroundcolor={\color[rgb]{0.8588,1,0.7333}},frame=single,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

@Test
\end_layout

\begin_layout Plain Layout

public void normalizeCalculation2DTest() {
\end_layout

\begin_layout Plain Layout

	Vektor2D v = new Vektor2D(3, 4);
\end_layout

\begin_layout Plain Layout

	v.normalize();
\end_layout

\begin_layout Plain Layout

	assert(v.x == 3/5.);
\end_layout

\begin_layout Plain Layout

	assert(v.y == 4/5.);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
So sieht die erste Implementierung des Codes aus:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize\ttfamily},tabsize=4,backgroundcolor={\color[rgb]{0.8588,1,0.7333}},frame=single,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

public void normalize() {
\end_layout

\begin_layout Plain Layout

	this.x = DRechnung.div(this.x, length());
\end_layout

\begin_layout Plain Layout

	this.y = DRechnung.div(this.y, length());
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ein wichtiger Test bei der Normierung von Vektoren ist, dass bei einer Länge
 von 
\family typewriter
length = 0
\family default
 keine Division durch Null erfolgt.
 Der Test dafür sieht wiefolgt aus:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize\ttfamily},tabsize=4,backgroundcolor={\color[rgb]{0.8588,1,0.7333}},frame=single,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

@Test
\end_layout

\begin_layout Plain Layout

public void normalizeLengthNull2DTest() {
\end_layout

\begin_layout Plain Layout

	Vektor2D v = new Vektor2D(0, 0);
\end_layout

\begin_layout Plain Layout

	v.normalize();
\end_layout

\begin_layout Plain Layout

	assert(v.x == 0);
\end_layout

\begin_layout Plain Layout

	assert(v.y == 0);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die Lösung dafür entspricht im Quellcode einer einfachen Überprüfung auf
 Null:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize\ttfamily},tabsize=4,backgroundcolor={\color[rgb]{0.8588,1,0.7333}},frame=single,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

public void normalize() throws Exception {
\end_layout

\begin_layout Plain Layout

	double len = length();
\end_layout

\begin_layout Plain Layout

	if (len == 0) {
\end_layout

\begin_layout Plain Layout

		return;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	this.x = DRechnung.div(this.x, len);
\end_layout

\begin_layout Plain Layout

	this.y = DRechnung.div(this.y, len);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Lineare Algebra
\end_layout

\begin_layout Subsubsection
Ausgewählte Methode: 
\family typewriter
abs()
\family default
 für Vektor3D
\end_layout

\begin_layout Standard
Diese Methode erhält als Parameter ein Objekt der Klasse 
\family typewriter
Vektor3D
\family default
 und gibt ihn so zurück, dass negative Komponenten als positive dargestellt
 werden.
 Positive Komponenten bleiben unberührt.
\end_layout

\begin_layout Standard
Der Test für die Funktionalität dieser Methode sieht wiefolgt aus:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize\ttfamily},showstringspaces=false,tabsize=3,backgroundcolor={\color[rgb]{0.8588,1,0.7333}},frame=single,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

@Test
\end_layout

\begin_layout Plain Layout

public void absCalc3DPosTest() {
\end_layout

\begin_layout Plain Layout

	Vektor3D v1 = new Vektor3D(4, -2, 2);
\end_layout

\begin_layout Plain Layout

	Vektor3D v2 = LineareAlgebra.abs(v1);
\end_layout

\begin_layout Plain Layout

	assert (v2.x == 4.0);
\end_layout

\begin_layout Plain Layout

	assert (v2.y == 2.0);
\end_layout

\begin_layout Plain Layout

	assert (v2.y == 2.0);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die dazugehörige Implementierung steht nachfolgend:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize\ttfamily},showstringspaces=false,tabsize=3,backgroundcolor={\color[rgb]{0.8588,1,0.7333}},frame=single,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

public static Vektor3D abs(Vektor3D vsrc) {
\end_layout

\begin_layout Plain Layout

	Vektor3D v = new Vektor3D(vsrc);
\end_layout

\begin_layout Plain Layout

	if (v.x < 0)
\end_layout

\begin_layout Plain Layout

		v.x = -v.x;
\end_layout

\begin_layout Plain Layout

	if (v.y < 0)
\end_layout

\begin_layout Plain Layout

		v.y = -v.y;
\end_layout

\begin_layout Plain Layout

	if (v.z < 0)
\end_layout

\begin_layout Plain Layout

		v.z = -v.z;
\end_layout

\begin_layout Plain Layout

	return v;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Ausgewählte Methode: 
\family typewriter
crossProduct()
\family default
 für Vektor3D
\end_layout

\begin_layout Standard
Die Methode 
\family typewriter
crossProduct()
\family default
 für dreidimensionale Vektoren bildet den orthogonalen Vektor 
\begin_inset Formula $\vec{n}$
\end_inset

 zu den beiden gegebenen 
\begin_inset Formula $\vec{p}$
\end_inset

 und 
\begin_inset Formula $\vec{q}$
\end_inset

 und gibt diesen zurück.
 Die Berechnungsvorschrift dafür lautet:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\vec{n}=\vec{p}x\vec{q}=\left(\begin{array}{c}
p_{x}\\
p_{y}\\
p_{z}
\end{array}\right)\times\left(\begin{array}{c}
q_{x}\\
q_{y}\\
q_{z}
\end{array}\right)=\left(\begin{array}{c}
p_{y}q_{z}-p_{z}q_{y}\\
p_{z}q_{x}-p_{x}q_{z}\\
p_{x}q_{y}-p_{y}q_{x}
\end{array}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
Am besten lässt sich diese mathematische Formel mit der 'Rechten-Hand-Regel'
 illustrieren [
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Die-'Rechte-Hand-Regel'."
plural "false"
caps "false"
noprefix "false"

\end_inset

].
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Die-'Rechte-Hand-Regel'."

\end_inset

Die 'Rechte-Hand-Regel'.
\begin_inset Graphics
	filename img/RechteHand.png
	lyxscale 10
	scale 10

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ein erster Test für das Kreuzprodukt findet sich nachfolgend:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize\ttfamily},showstringspaces=false,tabsize=3,backgroundcolor={\color[rgb]{0.8588,1,0.7333}},frame=single,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

@Test
\end_layout

\begin_layout Plain Layout

public void crossProd3DLACalcTest() {
\end_layout

\begin_layout Plain Layout

	Vektor3D v1 = new Vektor3D(1, 0, 0);
\end_layout

\begin_layout Plain Layout

	Vektor3D v2 = new Vektor3D(0, 1, 0);
\end_layout

\begin_layout Plain Layout

	Vektor3D v3 = LineareAlgebra.crossProduct(v1, v2);
\end_layout

\begin_layout Plain Layout

	assert (v3.x == 0);
\end_layout

\begin_layout Plain Layout

	assert (v3.y == 0);
\end_layout

\begin_layout Plain Layout

	assert (v3.z == 1);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die daraufhin entwickelte Implementierung sieht wiefolgt aus:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize\ttfamily},showstringspaces=false,tabsize=3,backgroundcolor={\color[rgb]{0.8588,1,0.7333}},frame=single,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

public static Vektor3D crossProduct(Vektor3D v1, Vektor3D v2) {
\end_layout

\begin_layout Plain Layout

	double x = DRechnung.sub(DRechnung.mult(v1.y, v2.z), DRechnung.mult(v1.z, v2.y));
\end_layout

\begin_layout Plain Layout

	double y = DRechnung.sub(DRechnung.mult(v1.z, v2.x), DRechnung.mult(v1.x, v2.z));
\end_layout

\begin_layout Plain Layout

	double z = DRechnung.sub(DRechnung.mult(v1.x, v2.y), DRechnung.mult(v1.y, v2.x));
\end_layout

\begin_layout Plain Layout

	return new Vektor3D(x, y, z);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "block 2019"
literal "true"

\end_inset

Block-Berlitz M.: 
\begin_inset Quotes eld
\end_inset


\emph on
Warum sich der Dino furchtbar erschreckte - Lehrbuch zu Beleuchtung und
 Rendering mit Java, LWJGL, OpenGL und GLSL
\emph default

\begin_inset Quotes erd
\end_inset

, vividus Wissenschaftsverlag, 2019 (to appear :) )
\end_layout

\end_body
\end_document
