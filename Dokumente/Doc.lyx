#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
%fuer codelistings:
\definecolor{lightergray}{rgb}{0.90, 0.90, 0.90} 
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1.5cm
\topmargin 1.5cm
\rightmargin 1.5cm
\bottommargin 1.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style german
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Belegarbeit Teil I
\begin_inset Newline newline
\end_inset

zur Veranstaltung Computergrafik und Visualisierung II
\end_layout

\begin_layout Author
Günther, Emanuel s76954 - Leopold, Michael s76904
\end_layout

\begin_layout Date
SoSe 2019
\end_layout

\begin_layout Section
Aufgabenstellung
\end_layout

\begin_layout Enumerate

\series bold
Vektor2D und Vektor3D 
\series default
[10 Punkte]
\series bold

\begin_inset Newline newline
\end_inset


\series default
Erstellen Sie die zwei Klassen 
\family typewriter
Vektor2D
\family default
 und 
\family typewriter
Vektor3D
\family default
, die entsprechend 2D- oder 3D-Vektoren repräsentieren können.
 Die Koordinaten werden jeweils durch 
\family typewriter
double
\family default
 repräsentiert.
 Weiterhin sollen sinnvolle Hilfsmethoden angeboten werden.
 Es sind mindestens die folgenden Funktionen (nachweislich) testgetrieben
 zu implementieren: 
\family typewriter
setPosition
\family default
, 
\family typewriter
isNullVector
\family default
, 
\family typewriter
add
\family default
, 
\family typewriter
sub
\family default
, 
\family typewriter
mult
\family default
, 
\family typewriter
div
\family default
, 
\family typewriter
isEqual
\family default
, 
\family typewriter
isNotEqual
\family default
, 
\family typewriter
length
\family default
 und 
\family typewriter
normalize
\family default
.
 Dokumentieren Sie Ihre Entwicklung mittels Test-Driven-Development in geeignete
r Weise.
\end_layout

\begin_layout Enumerate

\series bold
Lineare Algebra 
\series default
[20 Punkte]
\series bold

\begin_inset Newline newline
\end_inset


\series default
Schreiben Sie eine Klasse 
\family typewriter
LineareAlgebra
\family default
, die folgende Methoden (für 2D und 3D) zur Verfügung stellt: 
\family typewriter
add
\family default
, 
\family typewriter
sub
\family default
, 
\family typewriter
mult
\family default
, 
\family typewriter
div
\family default
, 
\family typewriter
isEqual
\family default
, 
\family typewriter
isNotEqual
\family default
, 
\family typewriter
length
\family default
, 
\family typewriter
normalize
\family default
, 
\family typewriter
euklDistance
\family default
, 
\family typewriter
manhattanDistance
\family default
, 
\family typewriter
crossProduct
\family default
, 
\family typewriter
dotProduct
\family default
, 
\family typewriter
cosEquation, sinEquation, angleRad
\family default
, 
\family typewriter
angleDegree
\family default
, 
\family typewriter
radToDegree
\family default
, 
\family typewriter
degreeToRad
\family default
, 
\family typewriter
determinante
\family default
, 
\family typewriter
abs
\family default
 und 
\family typewriter
show
\family default
.
 Auch hier soll die Entwicklung testgetrieben erfolgen.
 
\end_layout

\begin_layout Section
Lösung
\end_layout

\begin_layout Standard
Die vollständigen Lösungen wurden per Email abgegeben.
 Hier ein Auszug der relevanten Abschnitte zu den Klassen 
\family typewriter
Vektor2D
\family default
, 
\family typewriter
Vektor3D
\family default
 und 
\family typewriter
LineareAlgebra
\family default
.
\end_layout

\begin_layout Standard
Die Lösung wurde in 
\family typewriter
Eclipse 2019-03
\family default
 unter Zuhilfenahme von 
\family typewriter
JUnit 4
\family default
 entwickelt und getestet.
\end_layout

\begin_layout Subsection
Klasse abcd
\end_layout

\begin_layout Standard
voll die krasse Wrapper-Class für Berechnungen mit double in Java.
 Die ist sehr effizient! ;-)
\end_layout

\begin_layout Subsection
Klasse Vektor2D
\end_layout

\begin_layout Standard
Um den Zugriff auf die Variablen zu vereinfachen, wurden hier auf die get-
 und set-Methoden verzichtet:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize\ttfamily},tabsize=4,backgroundcolor={\color[rgb]{0.8588,1,0.7333}},frame=single,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

public class Vektor2D {
\end_layout

\begin_layout Plain Layout

	public double x, y;
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Verschachtelte Konstrukturen wurden angelegt, um Redundanz zu vermeiden:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize\ttfamily},tabsize=4,backgroundcolor={\color{lightergray}},frame=single,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

public Vektor2() {
\end_layout

\begin_layout Plain Layout

	this(0, 0);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public Vektor3D(double x, double y) {
\end_layout

\begin_layout Plain Layout

	this.x = x;
\end_layout

\begin_layout Plain Layout

	this.y = y;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public Vektor2D(Vektor2D src) {
\end_layout

\begin_layout Plain Layout

	this(src.x, src.y);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Ausgewählte Methode: normalize()
\end_layout

\begin_layout Standard
Die Methode 
\begin_inset Quotes gld
\end_inset

normalize()
\begin_inset Quotes grd
\end_inset

 ist eine Auswahl unter vielen, die zeigt, dass wir unseren Code Style stets
 klein und Ressourceneffizeint halten.
 Minimalistisch und Laufzeiteffizient indem möglichst wenige Aufrufe und
 Bedingungen auftreten.
\end_layout

\begin_layout Standard
Die Normierung eines Vektors lässt sich wiefolgt beschreiben:
\begin_inset Formula 
\[
norm(p)=\left(\begin{array}{c}
p_{x}/len(p)\\
p_{y}/len(p)
\end{array}\right);len(p)=\sqrt{p_{x}^{2}+p_{y}^{2}}
\]

\end_inset


\end_layout

\begin_layout Standard
Erster Test:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize\ttfamily},tabsize=4,backgroundcolor={\color{lightergray}},frame=single,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

public void normalizeCalculation2DTest() {
\end_layout

\begin_layout Plain Layout

	Vektor2D v = new Vektor2D(3, 4);
\end_layout

\begin_layout Plain Layout

	v.normalize();
\end_layout

\begin_layout Plain Layout

	assert(v.x == 3/5.);
\end_layout

\begin_layout Plain Layout

	assert(v.y == 4/5.);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Daraufhin entwickelter Code:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize\ttfamily},tabsize=4,backgroundcolor={\color{lightergray}},frame=single,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

public void normalize() {
\end_layout

\begin_layout Plain Layout

	this.x = this.x / length();
\end_layout

\begin_layout Plain Layout

	this.y = this.y / length();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dann getestet mit folgendem Test:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize\ttfamily},tabsize=4,backgroundcolor={\color{lightergray}},frame=single,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

public void normalizeLengthNull2DTest() {
\end_layout

\begin_layout Plain Layout

	Vektor2D v = new Vektor2D(0, 0);
\end_layout

\begin_layout Plain Layout

	v.normalize();
\end_layout

\begin_layout Plain Layout

	assert(v.x == 0);
\end_layout

\begin_layout Plain Layout

	assert(v.y == 0);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Auftauchende Probleme bei len = 0.
 -> wenn beide Komponenten null sind
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\scriptsize\ttfamily},tabsize=4,backgroundcolor={\color{lightergray}},frame=single,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

public void normalize() {
\end_layout

\begin_layout Plain Layout

	double len = length();
\end_layout

\begin_layout Plain Layout

	if (len == 0) {
\end_layout

\begin_layout Plain Layout

		return;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	this.x /= len;
\end_layout

\begin_layout Plain Layout

	this.y /= len;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Klasse Vektor3D
\end_layout

\begin_layout Standard
Vereinfachungen äquivalent zu Vektor2D.
\end_layout

\begin_layout Subsubsection
Ausgewählte Methode: sub()
\end_layout

\begin_layout Standard
dasd
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightergray}},basicstyle={\scriptsize\ttfamily},frame=single,language=Java,numbers=left,showstringspaces=false,tabsize=3,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

sub-code
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Lineare Algebra
\end_layout

\begin_layout Subsubsection
Ausgewählte Methode: abs() für Vektor3D
\end_layout

\begin_layout Standard
Diese Methode erhält als Parameter einen Vektor3D und gibt ihn so zurück,
 dass negative Komponenten als positive dargestellt werden.
 Positive Komponenten bleiben unberührt.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightergray}},basicstyle={\scriptsize\ttfamily},frame=single,language=Java,numbers=left,showstringspaces=false,tabsize=3,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

@Test
\end_layout

\begin_layout Plain Layout

public void absCalc3DPosTest() {
\end_layout

\begin_layout Plain Layout

	try {
\end_layout

\begin_layout Plain Layout

		Vektor3D v1 = new Vektor3D(4, -2, 2);
\end_layout

\begin_layout Plain Layout

		Vektor3D v2 = LineareAlgebra.abs(v1);
\end_layout

\begin_layout Plain Layout

		assert (v2.x == 4.0);
\end_layout

\begin_layout Plain Layout

		assert (v2.y == 2.0);
\end_layout

\begin_layout Plain Layout

		assert (v2.y == 2.0);
\end_layout

\begin_layout Plain Layout

	} catch (Exception e) {
\end_layout

\begin_layout Plain Layout

		System.out.println(e);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@Test(expected=Exception.class)
\end_layout

\begin_layout Plain Layout

public void absCalc3DNegTest() throws Exception {
\end_layout

\begin_layout Plain Layout

	Vektor3D v1 = new Vektor3D(4, Double.MIN_VALUE, 2);
\end_layout

\begin_layout Plain Layout

	Vektor3D v2 = LineareAlgebra.abs(v1);
\end_layout

\begin_layout Plain Layout

	assert (v2.x == 4.0);
\end_layout

\begin_layout Plain Layout

	assert (v2.y == 0);
\end_layout

\begin_layout Plain Layout

	assert (v2.z == 2.0);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightergray}},basicstyle={\scriptsize\ttfamily},frame=single,language=Java,numbers=left,showstringspaces=false,tabsize=3,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

public static Vektor3D abs(Vektor3D vsrc) throws Exception {
\end_layout

\begin_layout Plain Layout

	Vektor3D v = new Vektor3D(vsrc);
\end_layout

\begin_layout Plain Layout

	if ((v.x == Double.MIN_VALUE) || (v.y == Double.MIN_VALUE) || (v.z == Double.MIN_VALU
E))
\end_layout

\begin_layout Plain Layout

		throw new Exception("nicht darstellbar");
\end_layout

\begin_layout Plain Layout

	if (v.x < 0)
\end_layout

\begin_layout Plain Layout

		v.x = -v.x;
\end_layout

\begin_layout Plain Layout

	if (v.y < 0)
\end_layout

\begin_layout Plain Layout

		v.y = -v.y;
\end_layout

\begin_layout Plain Layout

	if (v.z < 0)
\end_layout

\begin_layout Plain Layout

		v.z = -v.z;
\end_layout

\begin_layout Plain Layout

	return v;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Ausgewählte Methode: crossProduct() für Vektor3D
\end_layout

\begin_layout Standard
Bildet den orthogonalen Vektor zu den beiden gegebenen und gibt diesen zurück.
 Berechnungsvorschrift:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
asdasdsa
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightergray}},basicstyle={\scriptsize\ttfamily},frame=single,language=Java,numbers=left,showstringspaces=false,tabsize=3,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

@Test
\end_layout

\begin_layout Plain Layout

public void crossProd3DLACalcTest() {
\end_layout

\begin_layout Plain Layout

	Vektor3D v1 = new Vektor3D(1, 0, 0);
\end_layout

\begin_layout Plain Layout

	Vektor3D v2 = new Vektor3D(0, 1, 0);
\end_layout

\begin_layout Plain Layout

	Vektor3D v3 = LineareAlgebra.crossProduct(v1, v2);
\end_layout

\begin_layout Plain Layout

	assert (v3.x == 0);
\end_layout

\begin_layout Plain Layout

	assert (v3.y == 0);
\end_layout

\begin_layout Plain Layout

	assert (v3.z == 1);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "backgroundcolor={\color{lightergray}},basicstyle={\scriptsize\ttfamily},frame=single,language=Java,numbers=left,showstringspaces=false,tabsize=3,xleftmargin=15pt"
inline false
status open

\begin_layout Plain Layout

public static Vektor3D crossProduct(Vektor3D v1, Vektor3D v2) {
\end_layout

\begin_layout Plain Layout

	double x = v1.y * v2.z - v1.z * v2.y;
\end_layout

\begin_layout Plain Layout

	double y = v1.z * v2.x - v1.x * v2.z;
\end_layout

\begin_layout Plain Layout

	double z = v1.x * v2.y - v1.y * v2.x;
\end_layout

\begin_layout Plain Layout

	return new Vektor3D(x, y, z);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "block 2019"
literal "true"

\end_inset

Block-Berlitz M.: 
\begin_inset Quotes eld
\end_inset


\emph on
Warum sich der Dino furchtbar erschreckte - Lehrbuch zu Beleuchtung und
 Rendering mit Java, LWJGL, OpenGL und GLSL
\emph default

\begin_inset Quotes erd
\end_inset

, vividus Wissenschaftsverlag, 2019 (to appear :) )
\end_layout

\end_body
\end_document
