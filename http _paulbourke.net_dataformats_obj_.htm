<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="viewport" content="width=device-width"><title>http://paulbourke.net/dataformats/obj/</title><link rel="stylesheet" type="text/css" href="resource://content-accessible/viewsource.css"></head><body id="viewsource" class="highlight" style="-moz-tab-size: 4" contextmenu="actions"><pre id="line1"><span></span><span class="error" title="Start-Tag wurde entdeckt, ohne dass ein Doctype zuerst gesehen wurde. “&lt;!DOCTYPE html&gt;” erwartet.">&lt;<span class="start-tag">html</span>&gt;</span><span>
<span id="line2"></span></span><span>&lt;<span class="start-tag">head</span>&gt;</span><span>
<span id="line3"></span></span><span>&lt;<span class="start-tag">link</span> <span class="attribute-name">rel</span>=<a class="attribute-value">StyleSheet</a> <span class="attribute-name">href</span>="<a class="attribute-value" href="view-source:http://paulbourke.net/pdbstyle.css">../../pdbstyle.css</a>" <span class="attribute-name">type</span>="<a class="attribute-value">text/css</a>" <span class="attribute-name">media</span>=<a class="attribute-value">all</a>&gt;</span><span>
<span id="line4"></span></span><span>&lt;<span class="start-tag">title</span>&gt;</span><span>Object Files (.obj)</span><span>&lt;/<span class="end-tag">title</span>&gt;</span><span>
<span id="line5"></span></span><span>&lt;/<span class="end-tag">head</span>&gt;</span><span>
<span id="line6"></span></span><span>&lt;<span class="start-tag">body</span>&gt;</span><span>
<span id="line7"></span>
<span id="line8"></span></span><span>&lt;<span class="start-tag">script</span> <span class="attribute-name">language</span>="<a class="attribute-value">JavaScript</a>"&gt;</span><span>
<span id="line9"></span></span><span>&lt;!</span><span>--
<span id="line10"></span>   if (self.location.href != top.location.href) {
<span id="line11"></span>      top.location.href = self.location.href;
<span id="line12"></span>   }
<span id="line13"></span>--&gt;
<span id="line14"></span></span><span>&lt;/<span class="end-tag">script</span>&gt;</span><span>
<span id="line15"></span>
<span id="line16"></span>
<span id="line17"></span></span><span>&lt;<span class="start-tag">center</span>&gt;</span><span></span><span>&lt;<span class="start-tag">table</span> <span class="attribute-name">width</span>=<a class="attribute-value">800</a>&gt;</span><span></span><span>&lt;<span class="start-tag">tr</span>&gt;</span><span></span><span>&lt;<span class="start-tag">td</span>&gt;</span><span>
<span id="line18"></span>
<span id="line19"></span></span><span>&lt;<span class="start-tag">center</span>&gt;</span><span>
<span id="line20"></span></span><span>&lt;<span class="start-tag">h1</span>&gt;</span><span>Object Files (.obj)</span><span>&lt;/<span class="end-tag">h1</span>&gt;</span><span>
<span id="line21"></span>Minimal example: </span><span>&lt;<span class="start-tag">a</span> <span class="attribute-name">href</span>="<a class="attribute-value" href="view-source:http://paulbourke.net/dataformats/obj/box.obj">box.obj</a>"&gt;</span><span>box.obj</span><span>&lt;/<span class="end-tag">a</span>&gt;</span><span></span><span>&lt;<span class="start-tag">br</span>&gt;</span><span>
<span id="line22"></span></span><span>&lt;<span class="start-tag">a</span> <span class="attribute-name">href</span>="<a class="attribute-value" href="view-source:http://paulbourke.net/dataformats/obj/minobj.html">minobj.html</a>"&gt;</span><span>Minimal textured example</span><span>&lt;/<span class="end-tag">a</span>&gt;</span><span>
<span id="line23"></span></span><span>&lt;/<span class="end-tag">center</span>&gt;</span><span>
<span id="line24"></span></span><span>&lt;<span class="start-tag">p</span>&gt;</span><span>
<span id="line25"></span>
<span id="line26"></span></span><span>&lt;<span class="start-tag">pre</span>&gt;</span><span>
<span id="line27"></span>Object files define the geometry and other properties for objects in
<span id="line28"></span>Wavefront's Advanced Visualizer. Object files can also be used to
<span id="line29"></span>transfer geometric data back and forth between the Advanced Visualizer
<span id="line30"></span>and other applications.
<span id="line31"></span>
<span id="line32"></span>Object files can be in ASCII format (.obj) or binary format (.mod).
<span id="line33"></span>This appendix describes the ASCII format for object files. These files
<span id="line34"></span>must have the extension .obj.
<span id="line35"></span>
<span id="line36"></span>In this release, the .obj file format supports both polygonal objects
<span id="line37"></span>and free-form objects. Polygonal geometry uses points, lines, and faces
<span id="line38"></span>to define objects while free-form geometry uses curves and surfaces.
<span id="line39"></span>
<span id="line40"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>About this section</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line41"></span>
<span id="line42"></span>The .obj appendix is for those who want to use the .obj format to
<span id="line43"></span>translate geometric data from other software applications to Wavefront
<span id="line44"></span>products. It also provides information for Advanced Visualizer users
<span id="line45"></span>who want detailed information on the Wavefront .obj file format.
<span id="line46"></span>
<span id="line47"></span>If you are a 2.11 user and want to understand the significance of the
<span id="line48"></span>3.0 release and how it affects your existing files, you may be
<span id="line49"></span>especially interested in the section called "Superseded statements" at
<span id="line50"></span>the end of the appendix. The section, "Patches and free-form surfaces,"
<span id="line51"></span>gives examples of how 2.11 patches look in 3.0.
<span id="line52"></span>
<span id="line53"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>How this section is organized</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line54"></span>
<span id="line55"></span>Most of this appendix describes the different parts of an .obj file and
<span id="line56"></span>how those parts are arranged in the file. The three sections at the end
<span id="line57"></span>of the appendix provide background information on the 3.0 release of
<span id="line58"></span>the .obj format.
<span id="line59"></span>
<span id="line60"></span>The .obj appendix includes the following sections:
<span id="line61"></span>
<span id="line62"></span>o       File structure
<span id="line63"></span>o       General statement
<span id="line64"></span>o       Vertex data
<span id="line65"></span>o       Specifying free-form curves/surfaces
<span id="line66"></span>o       Free-form curve/surface attributes
<span id="line67"></span>o       Elements
<span id="line68"></span>o       Free-form curve/surface body statements
<span id="line69"></span>o       Connectivity between free-form surfaces
<span id="line70"></span>o       Grouping
<span id="line71"></span>o       Display/render attributes
<span id="line72"></span>o       Comments
<span id="line73"></span>o       Mathematics for free-form curves/surfaces
<span id="line74"></span>o       Superseded statements
<span id="line75"></span>o       Patches and free-form surfaces
<span id="line76"></span>
<span id="line77"></span>    The curve and surface extensions to the .obj file format were
<span id="line78"></span>    developed in conjunction with mental images GmbH<span><span class="error" title="“&amp;” startete keine Zeichenreferenz. (“&amp;” sollte wahrscheinlich als “&amp;amp;” kodiert sein.)">&amp;</span>Co</span>.KG, Berlin,
<span id="line79"></span>    Germany, as part of a joint development project to incorporate
<span id="line80"></span>    free-form surfaces into Wavefront's Advanced Visualizer.
<span id="line81"></span>
<span id="line82"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>File structure</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line83"></span>
<span id="line84"></span>The following types of data may be included in an .obj file. In this
<span id="line85"></span>list, the keyword (in parentheses) follows the data type.
<span id="line86"></span>
<span id="line87"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Vertex data</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line88"></span>
<span id="line89"></span>o       geometric vertices (v)
<span id="line90"></span>o       texture vertices (vt)
<span id="line91"></span>o       vertex normals (vn)
<span id="line92"></span>o       parameter space vertices (vp)
<span id="line93"></span>	   Free-form curve/surface attributes
<span id="line94"></span>o       rational or non-rational forms of curve or surface type:
<span id="line95"></span>	   basis matrix, Bezier, B-spline, Cardinal, Taylor (cstype)
<span id="line96"></span>o       degree (deg)
<span id="line97"></span>o       basis matrix (bmat)
<span id="line98"></span>o       step size (step)
<span id="line99"></span>
<span id="line100"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Elements</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line101"></span>
<span id="line102"></span>o       point (p)
<span id="line103"></span>o       line (l)
<span id="line104"></span>o       face (f)
<span id="line105"></span>o       curve (curv)
<span id="line106"></span>o       2D curve (curv2)
<span id="line107"></span>o       surface (surf)
<span id="line108"></span>
<span id="line109"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Free-form curve/surface body statements</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line110"></span>
<span id="line111"></span>o       parameter values (parm)
<span id="line112"></span>o       outer trimming loop (trim)
<span id="line113"></span>o       inner trimming loop (hole)
<span id="line114"></span>o       special curve (scrv)
<span id="line115"></span>o       special point (sp)
<span id="line116"></span>o       end statement (end)
<span id="line117"></span>
<span id="line118"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Connectivity between free-form surfaces</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line119"></span>
<span id="line120"></span>o       connect (con)
<span id="line121"></span>
<span id="line122"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Grouping</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line123"></span>
<span id="line124"></span>o       group name (g)
<span id="line125"></span>o       smoothing group (s)
<span id="line126"></span>o       merging group (mg)
<span id="line127"></span>o       object name (o)
<span id="line128"></span>
<span id="line129"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Display/render attributes</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line130"></span>
<span id="line131"></span>o       bevel interpolation (bevel)
<span id="line132"></span>o       color interpolation (c_interp)
<span id="line133"></span>o       dissolve interpolation (d_interp)
<span id="line134"></span>o       level of detail (lod)
<span id="line135"></span>o       material name (usemtl)
<span id="line136"></span>o       material library (mtllib)
<span id="line137"></span>o       shadow casting (shadow_obj)
<span id="line138"></span>o       ray tracing (trace_obj)
<span id="line139"></span>o       curve approximation technique (ctech)
<span id="line140"></span>o       surface approximation technique (stech)
<span id="line141"></span>
<span id="line142"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>General statement</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line143"></span>
<span id="line144"></span>call  filename.ext arg1 arg2 . . .
<span id="line145"></span>
<span id="line146"></span>    Reads the contents of the specified .obj or .mod file at this
<span id="line147"></span>    location.  The call statement can be inserted into .obj files using
<span id="line148"></span>    a text editor.
<span id="line149"></span>
<span id="line150"></span>    filename.ext is the name of the .obj or .mod file to be read. You
<span id="line151"></span>    must include the extension with the filename.
<span id="line152"></span>
<span id="line153"></span>    arg1  arg2 . . .  specifies a series of optional integer arguments
<span id="line154"></span>    that are passed to the called file. There is no limit to the number
<span id="line155"></span>    of nested calls that can be made.
<span id="line156"></span>
<span id="line157"></span>    Arguments passed to the called file are substituted in the same way
<span id="line158"></span>    as in UNIX scripts; for example, $1 in the called file is replaced
<span id="line159"></span>    by arg1,  $2 in the called file is replaced by arg2, and so on.
<span id="line160"></span>
<span id="line161"></span>    If the frame number is needed in the called file for variable
<span id="line162"></span>    substitution, "$1" must be used as the first argument in the call
<span id="line163"></span>    statement. For example:
<span id="line164"></span>
<span id="line165"></span>	call filename.obj $1
<span id="line166"></span>
<span id="line167"></span>    Then the statement in the called file,
<span id="line168"></span>
<span id="line169"></span>	scmp filename.pv $1
<span id="line170"></span>
<span id="line171"></span>    will work as expected. For more information on the scmp statement,
<span id="line172"></span>    see appendix C, Variable Substitution for more information.
<span id="line173"></span>
<span id="line174"></span>    Another method to do the same thing is:
<span id="line175"></span>
<span id="line176"></span>	scmp filename.pv $1
<span id="line177"></span>
<span id="line178"></span>	call filename.obj
<span id="line179"></span>
<span id="line180"></span>    Using this method, the scmp statement provides the .pv file for all
<span id="line181"></span>    subsequently called .obj or .mod files.
<span id="line182"></span>
<span id="line183"></span>csh command
<span id="line184"></span>
<span id="line185"></span>csh -command
<span id="line186"></span>
<span id="line187"></span>    Executes the requested UNIX command. If the UNIX command returns an
<span id="line188"></span>    error, the parser flags an error during parsing.
<span id="line189"></span>
<span id="line190"></span>    If a dash (-) precedes the UNIX command, the error is ignored.
<span id="line191"></span>
<span id="line192"></span>    command is the UNIX command.
<span id="line193"></span>
<span id="line194"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Vertex data</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line195"></span>
<span id="line196"></span>Vertex data provides coordinates for:
<span id="line197"></span>
<span id="line198"></span>o        geometric vertices
<span id="line199"></span>o        texture vertices
<span id="line200"></span>o        vertex normals
<span id="line201"></span>
<span id="line202"></span>For free-form objects, the vertex data also provides:
<span id="line203"></span>
<span id="line204"></span>o        parameter space vertices
<span id="line205"></span>
<span id="line206"></span>The vertex data is represented by four vertex lists; one for each type
<span id="line207"></span>of vertex coordinate. A right-hand coordinate system is used to specify
<span id="line208"></span>the coordinate locations.
<span id="line209"></span>
<span id="line210"></span>The following sample is a portion of an .obj file that contains the
<span id="line211"></span>four types of vertex information.
<span id="line212"></span>
<span id="line213"></span>    v      -5.000000       5.000000       0.000000
<span id="line214"></span>    v      -5.000000      -5.000000       0.000000
<span id="line215"></span>    v       5.000000      -5.000000       0.000000
<span id="line216"></span>    v       5.000000       5.000000       0.000000
<span id="line217"></span>    vt     -5.000000       5.000000       0.000000
<span id="line218"></span>    vt     -5.000000      -5.000000       0.000000
<span id="line219"></span>    vt      5.000000      -5.000000       0.000000
<span id="line220"></span>    vt      5.000000       5.000000       0.000000
<span id="line221"></span>    vn      0.000000       0.000000       1.000000
<span id="line222"></span>    vn      0.000000       0.000000       1.000000
<span id="line223"></span>    vn      0.000000       0.000000       1.000000
<span id="line224"></span>    vn      0.000000       0.000000       1.000000
<span id="line225"></span>    vp      0.210000       3.590000
<span id="line226"></span>    vp      0.000000       0.000000
<span id="line227"></span>    vp      1.000000       0.000000
<span id="line228"></span>    vp      0.500000       0.500000
<span id="line229"></span>
<span id="line230"></span>When vertices are loaded into the Advanced Visualizer, they are
<span id="line231"></span>sequentially numbered, starting with 1. These reference numbers are
<span id="line232"></span>used in element statements.
<span id="line233"></span>
<span id="line234"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Syntax</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line235"></span>
<span id="line236"></span>The following syntax statements are listed in order of complexity.
<span id="line237"></span>
<span id="line238"></span>v x y z w
<span id="line239"></span>
<span id="line240"></span>    Polygonal and free-form geometry statement.
<span id="line241"></span>
<span id="line242"></span>    Specifies a geometric vertex and its x y z coordinates. Rational
<span id="line243"></span>    curves and surfaces require a fourth homogeneous coordinate, also
<span id="line244"></span>    called the weight.
<span id="line245"></span>
<span id="line246"></span>    x y z are the x, y, and z coordinates for the vertex. These are
<span id="line247"></span>    floating point numbers that define the position of the vertex in
<span id="line248"></span>    three dimensions.
<span id="line249"></span>
<span id="line250"></span>    w is the weight required for rational curves and surfaces. It is
<span id="line251"></span>    not required for non-rational curves and surfaces. If you do not
<span id="line252"></span>    specify a value for w, the default is 1.0.
<span id="line253"></span>
<span id="line254"></span>    NOTE: A positive weight value is recommended. Using zero or
<span id="line255"></span>    negative values may result in an undefined point in a curve or
<span id="line256"></span>    surface.
<span id="line257"></span>
<span id="line258"></span>vp u v w
<span id="line259"></span>
<span id="line260"></span>    Free-form geometry statement.
<span id="line261"></span>
<span id="line262"></span>    Specifies a point in the parameter space of a curve or surface.
<span id="line263"></span>
<span id="line264"></span>    The usage determines how many coordinates are required. Special
<span id="line265"></span>    points for curves require a 1D control point (u only) in the
<span id="line266"></span>    parameter space of the curve. Special points for surfaces require a
<span id="line267"></span>    2D point (u and v) in the parameter space of the surface. Control
<span id="line268"></span>    points for non-rational trimming curves require u and v
<span id="line269"></span>    coordinates. Control points for rational trimming curves require u,
<span id="line270"></span>    v, and w (weight) coordinates.
<span id="line271"></span>
<span id="line272"></span>    u is the point in the parameter space of a curve or the first
<span id="line273"></span>    coordinate in the parameter space of a surface.
<span id="line274"></span>
<span id="line275"></span>    v is the second coordinate in the parameter space of a surface.
<span id="line276"></span>
<span id="line277"></span>    w is the weight required for rational trimming curves. If you do
<span id="line278"></span>    not specify a value for w, it defaults to 1.0.
<span id="line279"></span>
<span id="line280"></span>    NOTE: For additional information on parameter vertices, see the
<span id="line281"></span>    curv2 and sp statements
<span id="line282"></span>
<span id="line283"></span>vn i j k
<span id="line284"></span>
<span id="line285"></span>    Polygonal and free-form geometry statement.
<span id="line286"></span>
<span id="line287"></span>    Specifies a normal vector with components i, j, and k.
<span id="line288"></span>
<span id="line289"></span>    Vertex normals affect the smooth-shading and rendering of geometry.
<span id="line290"></span>    For polygons, vertex normals are used in place of the actual facet
<span id="line291"></span>    normals.  For surfaces, vertex normals are interpolated over the
<span id="line292"></span>    entire surface and replace the actual analytic surface normal.
<span id="line293"></span>
<span id="line294"></span>    When vertex normals are present, they supersede smoothing groups.
<span id="line295"></span>
<span id="line296"></span>    i j k are the i, j, and k coordinates for the vertex normal. They
<span id="line297"></span>    are floating point numbers.
<span id="line298"></span>
<span id="line299"></span>vt u v w
<span id="line300"></span>
<span id="line301"></span>    Vertex statement for both polygonal and free-form geometry.
<span id="line302"></span>
<span id="line303"></span>    Specifies a texture vertex and its coordinates. A 1D texture
<span id="line304"></span>    requires only u texture coordinates, a 2D texture requires both u
<span id="line305"></span>    and v texture coordinates, and a 3D texture requires all three
<span id="line306"></span>    coordinates.
<span id="line307"></span>
<span id="line308"></span>    u is the value for the horizontal direction of the texture.
<span id="line309"></span>
<span id="line310"></span>    v is an optional argument.
<span id="line311"></span>
<span id="line312"></span>    v is the value for the vertical direction of the texture. The
<span id="line313"></span>    default is 0.
<span id="line314"></span>
<span id="line315"></span>    w is an optional argument.
<span id="line316"></span>
<span id="line317"></span>    w is a value for the depth of the texture. The default is 0.
<span id="line318"></span>
<span id="line319"></span>Specifying free-form curves/surfaces
<span id="line320"></span>
<span id="line321"></span>There are three steps involved in specifying a free-form curve or
<span id="line322"></span>surface element.
<span id="line323"></span>
<span id="line324"></span>o       Specify the type of curve or surface (basis matrix, Bezier,
<span id="line325"></span>	   B-spline, Cardinal, or Taylor) using free-form curve/surface
<span id="line326"></span>	   attributes.
<span id="line327"></span>o       Describe the curve or surface with element statements.
<span id="line328"></span>o       Supply additional information, using free-form curve/surface
<span id="line329"></span>	   body statements
<span id="line330"></span>
<span id="line331"></span>The next three sections of this appendix provide detailed information
<span id="line332"></span>on each of these steps.
<span id="line333"></span>
<span id="line334"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Data requirements for curves and surfaces</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line335"></span>
<span id="line336"></span>All curves and surfaces require a certain set of data. This consists of
<span id="line337"></span>the following:
<span id="line338"></span>
<span id="line339"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Free-form curve/surface attributes</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line340"></span>
<span id="line341"></span>o       All curves and surfaces require type data, which is given with
<span id="line342"></span>	   the cstype statement.
<span id="line343"></span>o       All curves and surfaces require degree data, which is given
<span id="line344"></span>	   with the deg statement.
<span id="line345"></span>o       Basis matrix curves or surfaces require a bmat statement.
<span id="line346"></span>o       Basis matrix curves or surfaces also require a step size, which
<span id="line347"></span>	   is given with the step statement.
<span id="line348"></span>
<span id="line349"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Elements</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line350"></span>
<span id="line351"></span>o       All curves and surfaces require control points, which are
<span id="line352"></span>	   referenced in the curv, curv2, or surf statements.
<span id="line353"></span>o       3D curves and surfaces require a parameter range, which is
<span id="line354"></span>	   given in the curv and surf statements, respectively.
<span id="line355"></span>
<span id="line356"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Free-form curve/surface body statements</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line357"></span>
<span id="line358"></span>o       All curves and surfaces require a set of global parameters or a
<span id="line359"></span>	   knot vector, both of which are given with the parm statement.
<span id="line360"></span>o       All curves and surfaces body statements require an explicit end
<span id="line361"></span>	   statement.
<span id="line362"></span>
<span id="line363"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Error checks</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line364"></span>
<span id="line365"></span>The above set of data starts out empty with no default values when
<span id="line366"></span>reading of an .obj file begins. While the file is being read,
<span id="line367"></span>statements are encountered, information is accumulated, and some errors
<span id="line368"></span>may be reported.
<span id="line369"></span>
<span id="line370"></span>When the end statement is encountered, the following error checks,
<span id="line371"></span>which involve consistency between various statements, are performed:
<span id="line372"></span>
<span id="line373"></span>o    All required information is present.
<span id="line374"></span>o    The number of control points, number of parameter values
<span id="line375"></span>	(knots), and degree are consistent with the curve or surface
<span id="line376"></span>	type. If the type is bmatrix, the step size is also consistent.
<span id="line377"></span>	(For more information, refer to the parameter vector equations
<span id="line378"></span>	in the section, "Mathematics of free-form curves/ surfaces" at
<span id="line379"></span>	the end of appendix B1.)
<span id="line380"></span>o    If the type is bmatrix and the degree is n, the size of the
<span id="line381"></span>	basis matrix is (n + 1) x (n + 1).
<span id="line382"></span>
<span id="line383"></span>Note that any information given by the state-setting statements remains
<span id="line384"></span>in effect from one curve or surface to the next. Information given
<span id="line385"></span>within a curve or surface body is only effective for the curve or
<span id="line386"></span>surface it is given with.
<span id="line387"></span>
<span id="line388"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Free-form curve/surface attributes</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line389"></span>
<span id="line390"></span>Five types of free-form geometry are available in the .obj file
<span id="line391"></span>format:
<span id="line392"></span>
<span id="line393"></span>o       Bezier
<span id="line394"></span>o       basis matrix
<span id="line395"></span>o       B-spline
<span id="line396"></span>o       Cardinal
<span id="line397"></span>o       Taylor
<span id="line398"></span>
<span id="line399"></span>You can apply these types only to curves and surfaces. Each of these
<span id="line400"></span>five types can be rational or non-rational.
<span id="line401"></span>
<span id="line402"></span>In addition to specifying the type, you must define the degree for the
<span id="line403"></span>curve or surface. For basis matrix curve and surface elements, you must
<span id="line404"></span>also specify the basis matrix and step size.
<span id="line405"></span>
<span id="line406"></span>All free-form curve and surface attribute statements are state-setting.
<span id="line407"></span>This means that once an attribute statement is set, it applies to all
<span id="line408"></span>elements that follow until it is reset to a different value.
<span id="line409"></span>
<span id="line410"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Syntax</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line411"></span>
<span id="line412"></span>The following syntax statements are listed in order of use.
<span id="line413"></span>
<span id="line414"></span>cstype rat type
<span id="line415"></span>
<span id="line416"></span>    Free-form geometry statement.
<span id="line417"></span>
<span id="line418"></span>    Specifies the type of curve or surface and indicates a rational or
<span id="line419"></span>    non-rational form.
<span id="line420"></span>
<span id="line421"></span>    rat is an optional argument.
<span id="line422"></span>
<span id="line423"></span>    rat specifies a rational form for the curve or surface type. If rat
<span id="line424"></span>    is not included, the curve or surface is non-rational
<span id="line425"></span>
<span id="line426"></span>    type specifies the curve or surface type. Allowed types are:
<span id="line427"></span>
<span id="line428"></span>	bmatrix		basis matrix
<span id="line429"></span>	bezier		Bezier
<span id="line430"></span>	bspline		B-spline
<span id="line431"></span>	cardinal        Cardinal
<span id="line432"></span>	taylor		Taylor
<span id="line433"></span>
<span id="line434"></span>    There is no default. A value must be supplied.
<span id="line435"></span>
<span id="line436"></span>deg degu degv
<span id="line437"></span>
<span id="line438"></span>    Free-form geometry statement.
<span id="line439"></span>
<span id="line440"></span>    Sets the polynomial degree for curves and surfaces.
<span id="line441"></span>
<span id="line442"></span>    degu is the degree in the u direction. It is required for both
<span id="line443"></span>    curves and surfaces.
<span id="line444"></span>
<span id="line445"></span>    degv is the degree in the v direction. It is required only for
<span id="line446"></span>    surfaces. For Bezier, B-spline, Taylor, and basis matrix, there is
<span id="line447"></span>    no default; a value must be supplied. For Cardinal, the degree is
<span id="line448"></span>    always 3. If some other value is given for Cardinal, it will be
<span id="line449"></span>    ignored.
<span id="line450"></span>
<span id="line451"></span>bmat u matrix
<span id="line452"></span>
<span id="line453"></span>bmat v matrix
<span id="line454"></span>
<span id="line455"></span>    Free-form geometry statement.
<span id="line456"></span>
<span id="line457"></span>    Sets the basis matrices used for basis matrix curves and surfaces.
<span id="line458"></span>    The u and v values must be specified in separate bmat statements.
<span id="line459"></span>
<span id="line460"></span>    NOTE: The deg statement must be given before the bmat statements
<span id="line461"></span>    and the size of the matrix must be appropriate for the degree.
<span id="line462"></span>
<span id="line463"></span>    u specifies that the basis matrix is applied in the u direction.
<span id="line464"></span>    v specifies that the basis matrix is applied in the v direction.
<span id="line465"></span>
<span id="line466"></span>    matrix lists the contents of the basis matrix with column subscript
<span id="line467"></span>    j varying the fastest. If n is the degree in the given u or v
<span id="line468"></span>    direction, the matrix (i,j) should be of size (n + 1) x (n + 1).
<span id="line469"></span>
<span id="line470"></span>    There is no default. A value must be supplied.
<span id="line471"></span>
<span id="line472"></span>    NOTE: The arrangement of the matrix is different from that commonly
<span id="line473"></span>    found in other references. For more information, see the examples
<span id="line474"></span>    at the end of this section and also the section, "Mathematics for
<span id="line475"></span>    free-form curves and surfaces."
<span id="line476"></span>
<span id="line477"></span>step stepu stepv
<span id="line478"></span>
<span id="line479"></span>    Free-form geometry statement.
<span id="line480"></span>
<span id="line481"></span>    Sets the step size for curves and surfaces that use a basis
<span id="line482"></span>    matrix.
<span id="line483"></span>
<span id="line484"></span>    stepu is the step size in the u direction. It is required for both
<span id="line485"></span>    curves and surfaces that use a basis matrix.
<span id="line486"></span>
<span id="line487"></span>    stepv is the step size in the v direction. It is required only for
<span id="line488"></span>    surfaces that use a basis matrix. There is no default. A value must
<span id="line489"></span>    be supplied.
<span id="line490"></span>
<span id="line491"></span>    When a curve or surface is being evaluated and a transition from
<span id="line492"></span>    one segment or patch to the next occurs, the set of control points
<span id="line493"></span>    used is incremented by the step size. The appropriate step size
<span id="line494"></span>    depends on the representation type, which is expressed through the
<span id="line495"></span>    basis matrix, and on the degree.
<span id="line496"></span>
<span id="line497"></span>    That is, suppose we are given a curve with k control points:
<span id="line498"></span>			{v , ... v }
<span id="line499"></span>			  1       k
<span id="line500"></span>
<span id="line501"></span>    If the curve is of degree n, then n + 1 control points are needed
<span id="line502"></span>    for each polynomial segment. If the step size is given as s, then
<span id="line503"></span>    the ith polynomial segment, where i = 0 is the first segment, will
<span id="line504"></span>    use the control points:
<span id="line505"></span>			{v    ,...,v      }
<span id="line506"></span>			  is+1      is+n+1
<span id="line507"></span>
<span id="line508"></span>    For example, for Bezier curves, s = n .
<span id="line509"></span>
<span id="line510"></span>    For surfaces, the above description applies independently to each
<span id="line511"></span>    parametric direction.
<span id="line512"></span>
<span id="line513"></span>    When you create a file which uses the basis matrix type, be sure to
<span id="line514"></span>    specify a step size appropriate for the current curve or surface
<span id="line515"></span>    representation.
<span id="line516"></span>
<span id="line517"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Examples</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line518"></span>
<span id="line519"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>1.      Cubic Bezier surface made with a basis matrix</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line520"></span>
<span id="line521"></span>    To create a cubic Bezier surface:
<span id="line522"></span>
<span id="line523"></span>	cstype bmatrix
<span id="line524"></span>	deg 3 3
<span id="line525"></span>	step 3 3
<span id="line526"></span>	bmat u  1       -3      3       -1      \
<span id="line527"></span>		0       3       -6      3       \
<span id="line528"></span>		0       0       3       -3      \
<span id="line529"></span>		0       0       0       1
<span id="line530"></span>	bmat v  1       -3      3       -1      \
<span id="line531"></span>		0       3       -6      3       \
<span id="line532"></span>		0       0       3       -3      \
<span id="line533"></span>		0       0       0       1
<span id="line534"></span>
<span id="line535"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>2.      Hermite curve made with a basis matrix</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line536"></span>
<span id="line537"></span>    To create a Hermite curve:
<span id="line538"></span>
<span id="line539"></span>	cstype bmatrix
<span id="line540"></span>	deg 3
<span id="line541"></span>	step 2
<span id="line542"></span>	bmat u  1     0     -3      2      0       0       3      -2 \
<span id="line543"></span>		0     1     -2      1      0       0      -1       1
<span id="line544"></span>
<span id="line545"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>3.      Bezier in u direction with B-spline in v direction;
<span id="line546"></span>	made with a basis matrix</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line547"></span>
<span id="line548"></span>    To create a surface with a cubic Bezier in the u direction and
<span id="line549"></span>    cubic uniform B-spline in the v direction:
<span id="line550"></span>
<span id="line551"></span>	cstype bmatrix
<span id="line552"></span>	deg 3 3
<span id="line553"></span>	step 3 1
<span id="line554"></span>	bmat u  1      -3       3      -1 \
<span id="line555"></span>		0       3      -6       3 \
<span id="line556"></span>		0       0       3      -3 \
<span id="line557"></span>		0       0       0       1
<span id="line558"></span>	bmat v  0.16666 -0.50000  0.50000 -0.16666 \
<span id="line559"></span>		0.66666  0.00000 -1.00000  0.50000 \
<span id="line560"></span>		0.16666  0.50000  0.50000 -0.50000 \
<span id="line561"></span>		0.00000  0.00000  0.00000  0.16666
<span id="line562"></span>
<span id="line563"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Elements</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line564"></span>
<span id="line565"></span>For polygonal geometry, the element types available in the .obj file
<span id="line566"></span>are:
<span id="line567"></span>
<span id="line568"></span>o       points
<span id="line569"></span>o       lines
<span id="line570"></span>o       faces
<span id="line571"></span>
<span id="line572"></span>For free-form geometry, the element types available in the .obj file
<span id="line573"></span>are:
<span id="line574"></span>
<span id="line575"></span>o       curve
<span id="line576"></span>o       2D curve on a surface
<span id="line577"></span>o       surface
<span id="line578"></span>
<span id="line579"></span>All elements can be freely intermixed in the file.
<span id="line580"></span>
<span id="line581"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Referencing vertex data</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line582"></span>
<span id="line583"></span>For all elements, reference numbers are used to identify geometric
<span id="line584"></span>vertices, texture vertices, vertex normals, and parameter space
<span id="line585"></span>vertices.
<span id="line586"></span>
<span id="line587"></span>Each of these types of vertices is numbered separately, starting with
<span id="line588"></span>1. This means that the first geometric vertex in the file is 1, the
<span id="line589"></span>second is 2, and so on. The first texture vertex in the file is 1, the
<span id="line590"></span>second is 2, and so on. The numbering continues sequentially throughout
<span id="line591"></span>the entire file. Frequently, files have multiple lists of vertex data.
<span id="line592"></span>This numbering sequence continues even when vertex data is separated by
<span id="line593"></span>other data.
<span id="line594"></span>
<span id="line595"></span>In addition to counting vertices down from the top of the first list in
<span id="line596"></span>the file, you can also count vertices back up the list from an
<span id="line597"></span>element's position in the file. When you count up the list from an
<span id="line598"></span>element, the reference numbers are negative. A reference number of -1
<span id="line599"></span>indicates the vertex immediately above the element. A reference number
<span id="line600"></span>of -2 indicates two references above and so on.
<span id="line601"></span>
<span id="line602"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Referencing groups of vertices</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line603"></span>
<span id="line604"></span>Some elements, such as faces and surfaces, may have a triplet of
<span id="line605"></span>numbers that reference vertex data.These numbers are the reference
<span id="line606"></span>numbers for a geometric vertex, a texture vertex, and a vertex normal.
<span id="line607"></span>
<span id="line608"></span>Each triplet of numbers specifies a geometric vertex, texture vertex,
<span id="line609"></span>and vertex normal. The reference numbers must be in order and must
<span id="line610"></span>separated by slashes (/).
<span id="line611"></span>
<span id="line612"></span>o       The first reference number is the geometric vertex.
<span id="line613"></span>o       The second reference number is the texture vertex. It follows
<span id="line614"></span>	   the first slash.
<span id="line615"></span>o       The third reference number is the vertex normal. It follows the
<span id="line616"></span>	   second slash.
<span id="line617"></span>
<span id="line618"></span>There is no space between numbers and the slashes. There may be more
<span id="line619"></span>than one series of geometric vertex/texture vertex/vertex normal
<span id="line620"></span>numbers on a line.
<span id="line621"></span>
<span id="line622"></span>The following is a portion of a sample file for a four-sided face
<span id="line623"></span>element:
<span id="line624"></span>
<span id="line625"></span>    f 1/1/1 2/2/2 3/3/3 4/4/4
<span id="line626"></span>
<span id="line627"></span>Using v, vt, and vn to represent geometric vertices, texture vertices,
<span id="line628"></span>and vertex normals, the statement would read:
<span id="line629"></span>
<span id="line630"></span>    f v/vt/vn v/vt/vn v/vt/vn v/vt/vn
<span id="line631"></span>
<span id="line632"></span>If there are only vertices and vertex normals for a face element (no
<span id="line633"></span>texture vertices), you would enter two slashes (//). For example, to
<span id="line634"></span>specify only the vertex and vertex normal reference numbers, you would
<span id="line635"></span>enter:
<span id="line636"></span>
<span id="line637"></span>    f 1//1 2//2 3//3 4//4
<span id="line638"></span>
<span id="line639"></span>When you are using a series of triplets, you must be consistent in the
<span id="line640"></span>way you reference the vertex data. For example, it is illegal to give
<span id="line641"></span>vertex normals for some vertices, but not all.
<span id="line642"></span>
<span id="line643"></span>The following is an example of an illegal statement.
<span id="line644"></span>
<span id="line645"></span>    f 1/1/1 2/2/2 3//3 4//4
<span id="line646"></span>
<span id="line647"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Syntax</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line648"></span>
<span id="line649"></span>The following syntax statements are listed in order of complexity of
<span id="line650"></span>geometry.
<span id="line651"></span>
<span id="line652"></span>p  v1 v2 v3 . . .
<span id="line653"></span>
<span id="line654"></span>    Polygonal geometry statement.
<span id="line655"></span>
<span id="line656"></span>    Specifies a point element and its vertex. You can specify multiple
<span id="line657"></span>    points with this statement. Although points cannot be shaded or
<span id="line658"></span>    rendered, they are used by other Advanced Visualizer programs.
<span id="line659"></span>
<span id="line660"></span>    v is the vertex reference number for a point element. Each point
<span id="line661"></span>    element requires one vertex. Positive values indicate absolute
<span id="line662"></span>    vertex numbers. Negative values indicate relative vertex numbers.
<span id="line663"></span>
<span id="line664"></span>l  v1/vt1   v2/vt2   v3/vt3 . . .
<span id="line665"></span>
<span id="line666"></span>    Polygonal geometry statement.
<span id="line667"></span>
<span id="line668"></span>    Specifies a line and its vertex reference numbers. You can
<span id="line669"></span>    optionally include the texture vertex reference numbers. Although
<span id="line670"></span>    lines cannot be shaded or rendered, they are used by other Advanced
<span id="line671"></span>    Visualizer programs.
<span id="line672"></span>
<span id="line673"></span>    The reference numbers for the vertices and texture vertices must be
<span id="line674"></span>    separated by a slash (/). There is no space between the number and
<span id="line675"></span>    the slash.
<span id="line676"></span>
<span id="line677"></span>    v is a reference number for a vertex on the line. A minimum of two
<span id="line678"></span>    vertex numbers are required. There is no limit on the maximum.
<span id="line679"></span>    Positive values indicate absolute vertex numbers. Negative values
<span id="line680"></span>    indicate relative vertex numbers.
<span id="line681"></span>
<span id="line682"></span>    vt is an optional argument.
<span id="line683"></span>
<span id="line684"></span>    vt is the reference number for a texture vertex in the line
<span id="line685"></span>    element. It must always follow the first slash.
<span id="line686"></span>
<span id="line687"></span>f  v1/vt1/vn1   v2/vt2/vn2   v3/vt3/vn3 . . .
<span id="line688"></span>
<span id="line689"></span>    Polygonal geometry statement.
<span id="line690"></span>
<span id="line691"></span>    Specifies a face element and its vertex reference number. You can
<span id="line692"></span>    optionally include the texture vertex and vertex normal reference
<span id="line693"></span>    numbers.
<span id="line694"></span>
<span id="line695"></span>    The reference numbers for the vertices, texture vertices, and
<span id="line696"></span>    vertex normals must be separated by slashes (/). There is no space
<span id="line697"></span>    between the number and the slash.
<span id="line698"></span>
<span id="line699"></span>    v is the reference number for a vertex in the face element. A
<span id="line700"></span>    minimum of three vertices are required.
<span id="line701"></span>
<span id="line702"></span>    vt is an optional argument.
<span id="line703"></span>
<span id="line704"></span>    vt is the reference number for a texture vertex in the face
<span id="line705"></span>    element. It always follows the first slash.
<span id="line706"></span>
<span id="line707"></span>    vn is an optional argument.
<span id="line708"></span>
<span id="line709"></span>    vn is the reference number for a vertex normal in the face element.
<span id="line710"></span>    It must always follow the second slash.
<span id="line711"></span>
<span id="line712"></span>    Face elements use surface normals to indicate their orientation. If
<span id="line713"></span>    vertices are ordered counterclockwise around the face, both the
<span id="line714"></span>    face and the normal will point toward the viewer. If the vertex
<span id="line715"></span>    ordering is clockwise, both will point away from the viewer. If
<span id="line716"></span>    vertex normals are assigned, they should point in the general
<span id="line717"></span>    direction of the surface normal, otherwise unpredictable results
<span id="line718"></span>    may occur.
<span id="line719"></span>
<span id="line720"></span>    If a face has a texture map assigned to it and no texture vertices
<span id="line721"></span>    are assigned in the f statement, the texture map is ignored when
<span id="line722"></span>    the element is rendered.
<span id="line723"></span>
<span id="line724"></span>    NOTE: Any references to fo (face outline) are no longer valid as of
<span id="line725"></span>    version 2.11. You can use f (face) to get the same results.
<span id="line726"></span>    References to fo in existing .obj files will still be read,
<span id="line727"></span>    however, they will be written out as f when the file is saved.
<span id="line728"></span>
<span id="line729"></span>curv u0 u1 v1 v2 . . .
<span id="line730"></span>
<span id="line731"></span>    Element statement for free-form geometry.
<span id="line732"></span>
<span id="line733"></span>    Specifies a curve, its parameter range, and its control vertices.
<span id="line734"></span>    Although curves cannot be shaded or rendered, they are used by
<span id="line735"></span>    other Advanced Visualizer programs.
<span id="line736"></span>
<span id="line737"></span>    u0 is the starting parameter value for the curve. This is a
<span id="line738"></span>    floating point number.
<span id="line739"></span>
<span id="line740"></span>    u1 is the ending parameter value for the curve. This is a floating
<span id="line741"></span>    point number.
<span id="line742"></span>
<span id="line743"></span>    v is the vertex reference number for a control point. You can
<span id="line744"></span>    specify multiple control points. A minimum of two control points
<span id="line745"></span>    are required for a curve.
<span id="line746"></span>
<span id="line747"></span>    For a non-rational curve, the control points must be 3D. For a
<span id="line748"></span>    rational curve, the control points are 3D or 4D. The fourth
<span id="line749"></span>    coordinate (weight) defaults to 1.0 if omitted.
<span id="line750"></span>
<span id="line751"></span>curv2  vp1  vp2   vp3. . .
<span id="line752"></span>
<span id="line753"></span>    Free-form geometry statement.
<span id="line754"></span>
<span id="line755"></span>    Specifies a 2D curve on a surface and its control points. A 2D
<span id="line756"></span>    curve is used as an outer or inner trimming curve, as a special
<span id="line757"></span>    curve, or for connectivity.
<span id="line758"></span>
<span id="line759"></span>    vp is the parameter vertex reference number for the control point.
<span id="line760"></span>    You can specify multiple control points. A minimum of two control
<span id="line761"></span>    points is required for a 2D curve.
<span id="line762"></span>
<span id="line763"></span>    The control points are parameter vertices because the curve must
<span id="line764"></span>    lie in the parameter space of some surface. For a non-rational
<span id="line765"></span>    curve, the control vertices can be 2D. For a rational curve, the
<span id="line766"></span>    control vertices can be 2D or 3D. The third coordinate (weight)
<span id="line767"></span>    defaults to 1.0 if omitted.
<span id="line768"></span>
<span id="line769"></span>surf  s0  s1  t0  t1  v1/vt1/vn1   v2/vt2/vn2 . . .
<span id="line770"></span>
<span id="line771"></span>    Element statement for free-form geometry.
<span id="line772"></span>
<span id="line773"></span>    Specifies a surface, its parameter range, and its control vertices.
<span id="line774"></span>    The surface is evaluated within the global parameter range from s0
<span id="line775"></span>    to s1 in the u direction and t0 to t1 in the v direction.
<span id="line776"></span>
<span id="line777"></span>    s0 is the starting parameter value for the surface in the u
<span id="line778"></span>    direction.
<span id="line779"></span>
<span id="line780"></span>    s1 is the ending parameter value for the surface in the u
<span id="line781"></span>    direction.
<span id="line782"></span>
<span id="line783"></span>    t0 is the starting parameter value for the surface in the v
<span id="line784"></span>    direction.
<span id="line785"></span>
<span id="line786"></span>    t1 is the ending parameter value for the surface in the v
<span id="line787"></span>    direction.
<span id="line788"></span>
<span id="line789"></span>    v is the reference number for a control vertex in the surface.
<span id="line790"></span>
<span id="line791"></span>    vt is an optional argument.
<span id="line792"></span>
<span id="line793"></span>    vt is the reference number for a texture vertex in the surface.  It
<span id="line794"></span>    must always follow the first slash.
<span id="line795"></span>
<span id="line796"></span>    vn is an optional argument.
<span id="line797"></span>
<span id="line798"></span>    vn is the reference number for a vertex normal in the surface.  It
<span id="line799"></span>    must always follow the second slash.
<span id="line800"></span>
<span id="line801"></span>    For a non-rational surface, the control vertices are 3D.  For a
<span id="line802"></span>    rational surface the control vertices can be 3D or 4D.  The fourth
<span id="line803"></span>    coordinate (weight) defaults to 1.0 if ommitted.
<span id="line804"></span>
<span id="line805"></span>    NOTE: For more information on the ordering of control points for
<span id="line806"></span>    survaces, refer to the section on surfaces and control points in
<span id="line807"></span>    "mathematics of free-form curves/surfaces" at the end of this
<span id="line808"></span>    appendix.
<span id="line809"></span>
<span id="line810"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Examples</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line811"></span>
<span id="line812"></span>These are examples for polygonal geometry.
<span id="line813"></span>
<span id="line814"></span>For examples using free-form geometry, see the examples at the end of
<span id="line815"></span>the next section, "Free-form curve/surface body statements."
<span id="line816"></span>
<span id="line817"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>1.	Square</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line818"></span>
<span id="line819"></span>This example shows a square that measures two units on each side and
<span id="line820"></span>faces in the positive direction (toward the camera).  Note that the
<span id="line821"></span>ordering of the vertices is counterclockwise. This ordering determines
<span id="line822"></span>that the square is facing forward.
<span id="line823"></span>
<span id="line824"></span>    v 0.000000 2.000000 0.000000
<span id="line825"></span>    v 0.000000 0.000000 0.000000
<span id="line826"></span>    v 2.000000 0.000000 0.000000
<span id="line827"></span>    v 2.000000 2.000000 0.000000
<span id="line828"></span>    f 1 2 3 4
<span id="line829"></span>
<span id="line830"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>2.      Cube</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line831"></span>
<span id="line832"></span>This is a cube that measures two units on each side. Each vertex is
<span id="line833"></span>shared by three different faces.
<span id="line834"></span>
<span id="line835"></span>    v 0.000000 2.000000 2.000000
<span id="line836"></span>    v 0.000000 0.000000 2.000000
<span id="line837"></span>    v 2.000000 0.000000 2.000000
<span id="line838"></span>    v 2.000000 2.000000 2.000000
<span id="line839"></span>    v 0.000000 2.000000 0.000000
<span id="line840"></span>    v 0.000000 0.000000 0.000000
<span id="line841"></span>    v 2.000000 0.000000 0.000000
<span id="line842"></span>    v 2.000000 2.000000 0.000000
<span id="line843"></span>    f 1 2 3 4
<span id="line844"></span>    f 8 7 6 5
<span id="line845"></span>    f 4 3 7 8
<span id="line846"></span>    f 5 1 4 8
<span id="line847"></span>    f 5 6 2 1
<span id="line848"></span>    f 2 6 7 3
<span id="line849"></span>
<span id="line850"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>3.      Cube with negative reference numbers</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line851"></span>
<span id="line852"></span>This is a cube with negative vertex reference numbers. Each element
<span id="line853"></span>references the vertices stored immediately above it in the file. Note
<span id="line854"></span>that vertices are not shared.
<span id="line855"></span>
<span id="line856"></span>v 0.000000 2.000000 2.000000
<span id="line857"></span>v 0.000000 0.000000 2.000000
<span id="line858"></span>v 2.000000 0.000000 2.000000
<span id="line859"></span>v 2.000000 2.000000 2.000000
<span id="line860"></span>f -4 -3 -2 -1
<span id="line861"></span>
<span id="line862"></span>v 2.000000 2.000000 0.000000
<span id="line863"></span>v 2.000000 0.000000 0.000000
<span id="line864"></span>v 0.000000 0.000000 0.000000
<span id="line865"></span>v 0.000000 2.000000 0.000000
<span id="line866"></span>f -4 -3 -2 -1
<span id="line867"></span>
<span id="line868"></span>v 2.000000 2.000000 2.000000
<span id="line869"></span>v 2.000000 0.000000 2.000000
<span id="line870"></span>v 2.000000 0.000000 0.000000
<span id="line871"></span>v 2.000000 2.000000 0.000000
<span id="line872"></span>f -4 -3 -2 -1
<span id="line873"></span>
<span id="line874"></span>v 0.000000 2.000000 0.000000
<span id="line875"></span>v 0.000000 2.000000 2.000000
<span id="line876"></span>v 2.000000 2.000000 2.000000
<span id="line877"></span>v 2.000000 2.000000 0.000000
<span id="line878"></span>f -4 -3 -2 -1
<span id="line879"></span>
<span id="line880"></span>v 0.000000 2.000000 0.000000
<span id="line881"></span>v 0.000000 0.000000 0.000000
<span id="line882"></span>v 0.000000 0.000000 2.000000
<span id="line883"></span>v 0.000000 2.000000 2.000000
<span id="line884"></span>f -4 -3 -2 -1
<span id="line885"></span>
<span id="line886"></span>v 0.000000 0.000000 2.000000
<span id="line887"></span>v 0.000000 0.000000 0.000000
<span id="line888"></span>v 2.000000 0.000000 0.000000
<span id="line889"></span>v 2.000000 0.000000 2.000000
<span id="line890"></span>f -4 -3 -2 -1
<span id="line891"></span>
<span id="line892"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Free-form curve/surface body statements</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line893"></span>
<span id="line894"></span>You can specify additional information for free-form curve and surface
<span id="line895"></span>elements using a series of statements called body statements. The
<span id="line896"></span>series is concluded by an end statement.
<span id="line897"></span>
<span id="line898"></span>Body statements are valid only when they appear between the free-form
<span id="line899"></span>element statement (curv, curv2, surf) and the end statement. If they
<span id="line900"></span>are anywhere else in the .obj file, they do not have any effect.
<span id="line901"></span>
<span id="line902"></span>You can use body statements to specify the following values:
<span id="line903"></span>
<span id="line904"></span>o       parameter
<span id="line905"></span>o       knot vector
<span id="line906"></span>o       trimming loop
<span id="line907"></span>o       hole
<span id="line908"></span>o       special curve
<span id="line909"></span>o       special point
<span id="line910"></span>
<span id="line911"></span>You cannot use any other statements between the free-form curve or
<span id="line912"></span>surface statement and the end statement. Using any other of type of
<span id="line913"></span>statement may cause unpredictable results.
<span id="line914"></span>
<span id="line915"></span>This portion of a sample file shows the knot vector values for a
<span id="line916"></span>rational B-spline surface with a trimming loop. Notice the end
<span id="line917"></span>statement to conclude the body statements.
<span id="line918"></span>
<span id="line919"></span>    cstype rat bspline
<span id="line920"></span>    deg 2 2
<span id="line921"></span>    surf -1.0 2.5 -2.0 2.0 -9 -8 -7 -6 -5 -4 -3 -2 -1
<span id="line922"></span>    parm u -1.00 -1.00 -1.00 2.50 2.50 2.50
<span id="line923"></span>    parm v -2.00 -2.00 -2.00 -2.00 -2.00 -2.00
<span id="line924"></span>    trim 0.0 2.0 1
<span id="line925"></span>    end
<span id="line926"></span>
<span id="line927"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Parameter values and knot vectors</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line928"></span>
<span id="line929"></span>All curve and surface elements require a set of parameter values.
<span id="line930"></span>
<span id="line931"></span>For polynomial curves and surfaces, this specifies global parameter
<span id="line932"></span>values. For B-spline curves and surfaces, this specifies the knot
<span id="line933"></span>vectors.
<span id="line934"></span>
<span id="line935"></span>For surfaces, the parameter values must be specified for both the u and
<span id="line936"></span>v directions. For curves, the parameter values must be specified for
<span id="line937"></span>only the u direction.
<span id="line938"></span>
<span id="line939"></span>If multiple parameter value statements for the same parametric
<span id="line940"></span>direction are used inside a single curve or surface body, the last
<span id="line941"></span>statement is used.
<span id="line942"></span>
<span id="line943"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Trimming loops and holes</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line944"></span>
<span id="line945"></span>The trimming loop statement builds a single outer trimming loop as a
<span id="line946"></span>sequence of curves which lie on a given surface.
<span id="line947"></span>
<span id="line948"></span>The hole statement builds a single inner trimming loop as a sequence of
<span id="line949"></span>curves which lie on a given surface. The inner loop creates a hole.
<span id="line950"></span>
<span id="line951"></span>The curves are referenced by number in the same way vertices are
<span id="line952"></span>referenced by face elements.
<span id="line953"></span>
<span id="line954"></span>The individual curves must lie end-to-end to form a closed loop which
<span id="line955"></span>does not intersect itself and which lies within the parameter range
<span id="line956"></span>specified for the surface. The loop as a whole may be oriented in
<span id="line957"></span>either direction (clockwise or counterclockwise).
<span id="line958"></span>
<span id="line959"></span>To cut one or more holes in a region, use a trim statement followed by
<span id="line960"></span>one or more hole statements. To introduce another trimmed region in the
<span id="line961"></span>same surface, use another trim statement followed by one or more hole
<span id="line962"></span>statements. The ordering that associates holes and the regions they cut
<span id="line963"></span>is important and must be maintained.
<span id="line964"></span>
<span id="line965"></span>If the first trim statement in the sequence is omitted, the enclosing
<span id="line966"></span>outer trimming loop is taken to be the parameter range of the surface.
<span id="line967"></span>If no trim or hole statements are specified, then the surface is
<span id="line968"></span>trimmed at its parameter range.
<span id="line969"></span>
<span id="line970"></span>This portion of a sample file shows a non-rational Bezier surface with
<span id="line971"></span>two regions, each with a single hole:
<span id="line972"></span>
<span id="line973"></span>    cstype bezier
<span id="line974"></span>    deg 1 1
<span id="line975"></span>    surf 0.0 2.0 0.0 2.0 1 2 3 4
<span id="line976"></span>    parm u 0.00 2.00
<span id="line977"></span>    parm v 0.00 2.00
<span id="line978"></span>    trim 0.0 4.0 1
<span id="line979"></span>    hole 0.0 4.0 2
<span id="line980"></span>    trim 0.0 4.0 3
<span id="line981"></span>    hole 0.0 4.0 4
<span id="line982"></span>    end
<span id="line983"></span>
<span id="line984"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Special curve</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line985"></span>
<span id="line986"></span>A special curve statement builds a single special curve as a sequence
<span id="line987"></span>of curves which lie on a given surface.
<span id="line988"></span>
<span id="line989"></span>The curves are referenced by number in the same way vertices are
<span id="line990"></span>referenced by face elements.
<span id="line991"></span>
<span id="line992"></span>A special curve is guaranteed to be included in any triangulation of
<span id="line993"></span>the surface. This means that the line formed by approximating the
<span id="line994"></span>special curve with a sequence of straight line segments will actually
<span id="line995"></span>appear as a sequence of triangle edges in the final triangulation.
<span id="line996"></span>
<span id="line997"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Special point</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line998"></span>
<span id="line999"></span>A special point statement specifies that special geometric points are
<span id="line1000"></span>to be associated with a curve or surface. For space curves and trimming
<span id="line1001"></span>curves, the parameter vertices must be 1D. For surfaces, the parameter
<span id="line1002"></span>vertices must be 2D.
<span id="line1003"></span>
<span id="line1004"></span>These special points will be included in any linear approximation of
<span id="line1005"></span>the curve or surface.
<span id="line1006"></span>
<span id="line1007"></span>For space curves, this means that the point corresponding to the given
<span id="line1008"></span>curve parameter is included as one of the vertices in an approximation
<span id="line1009"></span>consisting of a sequence of line segments.
<span id="line1010"></span>
<span id="line1011"></span>For surfaces, this means that the point corresponding to the given
<span id="line1012"></span>surface parameters is included as a triangle vertex in the
<span id="line1013"></span>triangulation.
<span id="line1014"></span>
<span id="line1015"></span>For trimming curves, the treatment is slightly different: a special
<span id="line1016"></span>point on a trimming curve is essentially the same as a special point on
<span id="line1017"></span>the surface it trims.
<span id="line1018"></span>
<span id="line1019"></span>The following portion of a sample files shows special points for a
<span id="line1020"></span>rational Bezier 2D curve on a surface.
<span id="line1021"></span>
<span id="line1022"></span>    vp -0.675  1.850  3.000
<span id="line1023"></span>    vp  0.915  1.930
<span id="line1024"></span>    vp  2.485  0.470  2.000
<span id="line1025"></span>    vp  2.485 -1.030
<span id="line1026"></span>    vp  1.605 -1.890 10.700
<span id="line1027"></span>    vp -0.745 -0.654  0.500
<span id="line1028"></span>    cstype rat bezier
<span id="line1029"></span>    curv2 -6 -5 -4 -3 -2 -1 -6
<span id="line1030"></span>    parm u 0.00 1.00 2.00
<span id="line1031"></span>    sp 2 3
<span id="line1032"></span>    end
<span id="line1033"></span>
<span id="line1034"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Syntax</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line1035"></span>
<span id="line1036"></span>The following syntax statement are listed in order of normal use.
<span id="line1037"></span>
<span id="line1038"></span>parm u p1 p2 p3. . .
<span id="line1039"></span>
<span id="line1040"></span>parm v p1 p2 p3 . . .
<span id="line1041"></span>
<span id="line1042"></span>    Body statement for free-form geometry.
<span id="line1043"></span>
<span id="line1044"></span>    Specifies global parameter values. For B-spline curves and
<span id="line1045"></span>    surfaces, this specifies the knot vectors.
<span id="line1046"></span>
<span id="line1047"></span>    u is the u direction for the parameter values.
<span id="line1048"></span>
<span id="line1049"></span>    v is the v direction for the parameter values.
<span id="line1050"></span>
<span id="line1051"></span>    To set u and v values, use separate command lines.
<span id="line1052"></span>
<span id="line1053"></span>    p is the global parameter or knot value. You can specify multiple
<span id="line1054"></span>    values. A minimum of two parameter values are required. Parameter
<span id="line1055"></span>    values must increase monotonically. The type of surface and the
<span id="line1056"></span>    degree dictate the number of values required.
<span id="line1057"></span>
<span id="line1058"></span>trim  u0  u1  curv2d  u0  u1  curv2d . . .
<span id="line1059"></span>
<span id="line1060"></span>    Body statement for free-form geometry.
<span id="line1061"></span>
<span id="line1062"></span>    Specifies a sequence of curves to build a single outer trimming
<span id="line1063"></span>    loop.
<span id="line1064"></span>
<span id="line1065"></span>    u0 is the starting parameter value for the trimming curve curv2d.
<span id="line1066"></span>
<span id="line1067"></span>    u1 is the ending parameter value for the trimming curve curv2d.
<span id="line1068"></span>
<span id="line1069"></span>    curv2d is the index of the trimming curve lying in the parameter
<span id="line1070"></span>    space of the surface. This curve must have been previously defined
<span id="line1071"></span>    with the curv2 statement.
<span id="line1072"></span>
<span id="line1073"></span>hole  u0  u1  curv2d  u0  u1  curv2d . . .
<span id="line1074"></span>
<span id="line1075"></span>    Body statement for free-form geometry.
<span id="line1076"></span>
<span id="line1077"></span>    Specifies a sequence of curves to build a single inner trimming
<span id="line1078"></span>    loop (hole).
<span id="line1079"></span>
<span id="line1080"></span>    u0 is the starting parameter value for the trimming curve curv2d.
<span id="line1081"></span>
<span id="line1082"></span>    u1 is the ending parameter value for the trimming curve curv2d.
<span id="line1083"></span>
<span id="line1084"></span>    curv2d is the index of the trimming curve lying in the parameter
<span id="line1085"></span>    space of the surface. This curve must have been previously defined
<span id="line1086"></span>    with the curv2 statement.
<span id="line1087"></span>
<span id="line1088"></span>scrv u0 u1 curv2d u0 u1 curv2d . . .
<span id="line1089"></span>
<span id="line1090"></span>    Body statement for free-form geometry.
<span id="line1091"></span>
<span id="line1092"></span>    Specifies a sequence of curves which lie on the given surface to
<span id="line1093"></span>    build a single special curve.
<span id="line1094"></span>
<span id="line1095"></span>    u0 is the starting parameter value for the special curve curv2d.
<span id="line1096"></span>
<span id="line1097"></span>    u1 is the ending parameter value for the special curve curv2d.
<span id="line1098"></span>
<span id="line1099"></span>    curv2d is the index of the special curve lying in the parameter
<span id="line1100"></span>    space of the surface. This curve must have been previously defined
<span id="line1101"></span>    with the curv2 statement.
<span id="line1102"></span>
<span id="line1103"></span>sp vp1  vp. . .
<span id="line1104"></span>
<span id="line1105"></span>    Body statement for free-form geometry.
<span id="line1106"></span>
<span id="line1107"></span>    Specifies special geometric points to be associated with a curve or
<span id="line1108"></span>    surface. For space curves and trimming curves, the parameter
<span id="line1109"></span>    vertices must be 1D. For surfaces, the parameter vertices must be
<span id="line1110"></span>    2D.
<span id="line1111"></span>
<span id="line1112"></span>    vp is the reference number for the parameter vertex of a special
<span id="line1113"></span>    point to be associated with the parameter space point of the curve
<span id="line1114"></span>    or surface.
<span id="line1115"></span>
<span id="line1116"></span>end
<span id="line1117"></span>
<span id="line1118"></span>    Body statement for free-form geometry.
<span id="line1119"></span>
<span id="line1120"></span>    Specifies the end of a curve or surface body begun by a curv,
<span id="line1121"></span>    curv2, or surf statement.
<span id="line1122"></span>
<span id="line1123"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Examples</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line1124"></span>
<span id="line1125"></span>1.      Taylor curve
<span id="line1126"></span>
<span id="line1127"></span>    For creating a single-segment Taylor polynomial curve of the form:
<span id="line1128"></span>
<span id="line1129"></span>                                   2         3         4
<span id="line1130"></span>	x =  3.00 +  2.30t +  7.98t  +  8.30t  +  6.34t 
<span id="line1131"></span>
<span id="line1132"></span>                                   2         3         4
<span id="line1133"></span>	y =  1.00 - 10.10t +  5.40t  -  4.70t  +  2.03t 
<span id="line1134"></span>
<span id="line1135"></span>                                   2         3         4
<span id="line1136"></span>	z = -2.50 +  0.50t -  7.00t  + 18.10t  +  0.08t 
<span id="line1137"></span>
<span id="line1138"></span>and evaluated between the global parameters 0.5 and 1.6:
<span id="line1139"></span>
<span id="line1140"></span>	v       3.000    1.000   -2.500
<span id="line1141"></span>	v       2.300  -10.100    0.500
<span id="line1142"></span>	v       7.980    5.400   -7.000
<span id="line1143"></span>	v       8.300   -4.700   18.100
<span id="line1144"></span>	v       6.340    2.030    0.080
<span id="line1145"></span>	cstype taylor
<span id="line1146"></span>	deg 4
<span id="line1147"></span>	curv 0.500 1.600 1 2 3 4 5
<span id="line1148"></span>	parm u 0.000 2.000
<span id="line1149"></span>	end
<span id="line1150"></span>
<span id="line1151"></span>2.      Bezier curve
<span id="line1152"></span>
<span id="line1153"></span>This example shows a non-rational Bezier curve with 13 control points.
<span id="line1154"></span>
<span id="line1155"></span>    v -2.300000 1.950000 0.000000
<span id="line1156"></span>    v -2.200000 0.790000 0.000000
<span id="line1157"></span>    v -2.340000 -1.510000 0.000000
<span id="line1158"></span>    v -1.530000 -1.490000 0.000000
<span id="line1159"></span>    v -0.720000 -1.470000 0.000000
<span id="line1160"></span>    v -0.780000 0.230000 0.000000
<span id="line1161"></span>    v 0.070000 0.250000 0.000000
<span id="line1162"></span>    v 0.920000 0.270000 0.000000
<span id="line1163"></span>    v 0.800000 -1.610000 0.000000
<span id="line1164"></span>    v 1.620000 -1.590000 0.000000
<span id="line1165"></span>    v 2.440000 -1.570000 0.000000
<span id="line1166"></span>    v 2.690000 0.670000 0.000000
<span id="line1167"></span>    v 2.900000 1.980000 0.000000
<span id="line1168"></span>    # 13 vertices
<span id="line1169"></span>
<span id="line1170"></span>    cstype bezier
<span id="line1171"></span>    ctech cparm 1.000000
<span id="line1172"></span>    deg 3
<span id="line1173"></span>    curv 0.000000 4.000000 1 2 3 4 5 6 7 8 9 10 \
<span id="line1174"></span>    11 12 13
<span id="line1175"></span>    parm u 0.000000 1.000000 2.000000 3.000000  \
<span id="line1176"></span>    4.000000
<span id="line1177"></span>    end
<span id="line1178"></span>    # 1 element
<span id="line1179"></span>
<span id="line1180"></span>3.      B-spline surface
<span id="line1181"></span>
<span id="line1182"></span>This is an example of a cubic B-spline surface.
<span id="line1183"></span>
<span id="line1184"></span>    g bspatch
<span id="line1185"></span>    v -5.000000 -5.000000 -7.808327
<span id="line1186"></span>    v -5.000000 -1.666667 -7.808327
<span id="line1187"></span>    v -5.000000 1.666667 -7.808327
<span id="line1188"></span>    v -5.000000 5.000000 -7.808327
<span id="line1189"></span>    v -1.666667 -5.000000 -7.808327
<span id="line1190"></span>    v -1.666667 -1.666667 11.977780
<span id="line1191"></span>    v -1.666667 1.666667 11.977780
<span id="line1192"></span>    v -1.666667 5.000000 -7.808327
<span id="line1193"></span>    v 1.666667 -5.000000 -7.808327
<span id="line1194"></span>    v 1.666667 -1.666667 11.977780
<span id="line1195"></span>    v 1.666667 1.666667 11.977780
<span id="line1196"></span>    v 1.666667 5.000000 -7.808327
<span id="line1197"></span>    v 5.000000 -5.000000 -7.808327
<span id="line1198"></span>    v 5.000000 -1.666667 -7.808327
<span id="line1199"></span>    v 5.000000 1.666667 -7.808327
<span id="line1200"></span>    v 5.000000 5.000000 -7.808327
<span id="line1201"></span>    # 16 vertices
<span id="line1202"></span>
<span id="line1203"></span>    cstype bspline
<span id="line1204"></span>    stech curv 0.5 10.000000
<span id="line1205"></span>    deg 3 3
<span id="line1206"></span>    8surf 0.000000 1.000000 0.000000 1.000000 13 14 \ 15 16 9 10 11 12 5 6
<span id="line1207"></span>    7 8 1 2 3 4
<span id="line1208"></span>    parm u -3.000000 -2.000000 -1.000000 0.000000  \
<span id="line1209"></span>    1.000000 2.000000 3.000000 4.000000
<span id="line1210"></span>    parm v -3.000000 -2.000000 -1.000000 0.000000  \
<span id="line1211"></span>    1.000000 2.000000 3.000000 4.000000
<span id="line1212"></span>    end
<span id="line1213"></span>    # 1 element
<span id="line1214"></span>
<span id="line1215"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>4.      Cardinal surface</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line1216"></span>
<span id="line1217"></span>This example shows a Cardinal surface.
<span id="line1218"></span>
<span id="line1219"></span>    v -5.000000 -5.000000 0.000000
<span id="line1220"></span>    v -5.000000 -1.666667 0.000000
<span id="line1221"></span>    v -5.000000 1.666667 0.000000
<span id="line1222"></span>    v -5.000000 5.000000 0.000000
<span id="line1223"></span>    v -1.666667 -5.000000 0.000000
<span id="line1224"></span>    v -1.666667 -1.666667 0.000000
<span id="line1225"></span>    v -1.666667 1.666667 0.000000
<span id="line1226"></span>    v -1.666667 5.000000 0.000000
<span id="line1227"></span>    v 1.666667 -5.000000 0.000000
<span id="line1228"></span>    v 1.666667 -1.666667 0.000000
<span id="line1229"></span>    v 1.666667 1.666667 0.000000
<span id="line1230"></span>    v 1.666667 5.000000 0.000000
<span id="line1231"></span>    v 5.000000 -5.000000 0.000000
<span id="line1232"></span>    v 5.000000 -1.666667 0.000000
<span id="line1233"></span>    v 5.000000 1.666667 0.000000
<span id="line1234"></span>    v 5.000000 5.000000 0.000000
<span id="line1235"></span>    # 16 vertices
<span id="line1236"></span>
<span id="line1237"></span>    cstype cardinal
<span id="line1238"></span>    stech cparma 1.000000 1.000000
<span id="line1239"></span>    deg 3 3
<span id="line1240"></span>    surf 0.000000 1.000000 0.000000 1.000000 13 14 \
<span id="line1241"></span>    15 16 9 10 11 12 5 6 7 8 1 2 3 4
<span id="line1242"></span>    parm u 0.000000 1.000000
<span id="line1243"></span>    parm v 0.000000 1.000000
<span id="line1244"></span>    end
<span id="line1245"></span>    # 1 element
<span id="line1246"></span>
<span id="line1247"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>5.      Rational B-spline surface</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line1248"></span>
<span id="line1249"></span>This example creates a second-degree, rational B-spline surface using
<span id="line1250"></span>open, uniform knot vectors. A texture map is applied to the surface.
<span id="line1251"></span>
<span id="line1252"></span>    v -1.3 -1.0  0.0
<span id="line1253"></span>    v  0.1 -1.0  0.4  7.6
<span id="line1254"></span>    v  1.4 -1.0  0.0  2.3
<span id="line1255"></span>    v -1.4  0.0  0.2
<span id="line1256"></span>    v  0.1  0.0  0.9  0.5
<span id="line1257"></span>    v  1.3  0.0  0.4  1.5
<span id="line1258"></span>    v -1.4  1.0  0.0  2.3
<span id="line1259"></span>    v  0.1  1.0  0.3  6.1
<span id="line1260"></span>    v  1.1  1.0  0.0  3.3
<span id="line1261"></span>    vt 0.0  0.0
<span id="line1262"></span>    vt 0.5  0.0
<span id="line1263"></span>    vt 1.0  0.0
<span id="line1264"></span>    vt 0.0  0.5
<span id="line1265"></span>    vt 0.5  0.5
<span id="line1266"></span>    vt 1.0  0.5
<span id="line1267"></span>    vt 0.0  1.0
<span id="line1268"></span>    vt 0.5  1.0
<span id="line1269"></span>    vt 1.0  1.0
<span id="line1270"></span>    cstype rat bspline
<span id="line1271"></span>    deg 2 2
<span id="line1272"></span>    surf 0.0 1.0 0.0 1.0 1/1 2/2 3/3 4/4 5/5 6/6 \
<span id="line1273"></span>    7/7 8/8 9/9
<span id="line1274"></span>    parm u 0.0 0.0 0.0 1.0 1.0 1.0
<span id="line1275"></span>    parm v 0.0 0.0 0.0 1.0 1.0 1.0
<span id="line1276"></span>    end
<span id="line1277"></span>
<span id="line1278"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>6.      Trimmed NURB surface</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line1279"></span>
<span id="line1280"></span>This is a complete example of a file containing a trimmed NURB surface
<span id="line1281"></span>with negative reference numbers for vertices.
<span id="line1282"></span>
<span id="line1283"></span>    # trimming curve
<span id="line1284"></span>    vp -0.675  1.850  3.000
<span id="line1285"></span>    vp  0.915  1.930
<span id="line1286"></span>    vp  2.485  0.470  2.000
<span id="line1287"></span>    vp  2.485 -1.030
<span id="line1288"></span>    vp  1.605 -1.890 10.700
<span id="line1289"></span>    vp -0.745 -0.654  0.500
<span id="line1290"></span>    cstype rat bezier
<span id="line1291"></span>    deg 3
<span id="line1292"></span>    curv2 -6 -5 -4 -3 -2 -1 -6
<span id="line1293"></span>    parm u 0.00 1.00 2.00
<span id="line1294"></span>    end
<span id="line1295"></span>    # surface
<span id="line1296"></span>    v -1.350 -1.030 0.000
<span id="line1297"></span>    v  0.130 -1.030 0.432 7.600
<span id="line1298"></span>    v  1.480 -1.030 0.000 2.300
<span id="line1299"></span>    v -1.460  0.060 0.201
<span id="line1300"></span>    v  0.120  0.060 0.915 0.500
<span id="line1301"></span>    v  1.380  0.060 0.454 1.500
<span id="line1302"></span>    v -1.480  1.030 0.000 2.300
<span id="line1303"></span>    v  0.120  1.030 0.394 6.100
<span id="line1304"></span>    v  1.170  1.030 0.000 3.300
<span id="line1305"></span>    cstype rat bspline
<span id="line1306"></span>    deg 2 2
<span id="line1307"></span>    surf -1.0 2.5 -2.0 2.0 -9 -8 -7 -6 -5 -4 -3 -2 -1
<span id="line1308"></span>    parm u -1.00 -1.00 -1.00 2.50 2.50 2.50
<span id="line1309"></span>    parm v -2.00 -2.00 -2.00 -2.00 -2.00 -2.00
<span id="line1310"></span>    trim 0.0 2.0 1
<span id="line1311"></span>    end
<span id="line1312"></span>
<span id="line1313"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>7.      Two trimming regions with a hole</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line1314"></span>
<span id="line1315"></span>This example shows a Bezier surface with two trimming regions, each
<span id="line1316"></span>with a hole in them.
<span id="line1317"></span>
<span id="line1318"></span>    # outer loop of first region
<span id="line1319"></span>    deg 1
<span id="line1320"></span>    cstype bezier
<span id="line1321"></span>    vp 0.100 0.100
<span id="line1322"></span>    vp 0.900 0.100
<span id="line1323"></span>    vp 0.900 0.900
<span id="line1324"></span>    vp 0.100 0.900
<span id="line1325"></span>    curv2 1 2 3 4 1
<span id="line1326"></span>    parm u 0.00 1.00 2.00 3.00 4.00
<span id="line1327"></span>    end
<span id="line1328"></span>    # hole in first region
<span id="line1329"></span>    vp 0.300 0.300
<span id="line1330"></span>    vp 0.700 0.300
<span id="line1331"></span>    vp 0.700 0.700
<span id="line1332"></span>    vp 0.300 0.700
<span id="line1333"></span>    curv2 5 6 7 8 5
<span id="line1334"></span>    parm u 0.00 1.00 2.00 3.00 4.00
<span id="line1335"></span>    end
<span id="line1336"></span>    # outer loop of second region
<span id="line1337"></span>    vp 1.100 1.100
<span id="line1338"></span>    vp 1.900 1.100
<span id="line1339"></span>    vp 1.900 1.900
<span id="line1340"></span>    vp 1.100 1.900
<span id="line1341"></span>    curv2 9 10 11 12 9
<span id="line1342"></span>    parm u 0.00 1.00 2.00 3.00 4.00
<span id="line1343"></span>    end
<span id="line1344"></span>    # hole in second region
<span id="line1345"></span>    vp 1.300 1.300
<span id="line1346"></span>    vp 1.700 1.300
<span id="line1347"></span>    vp 1.700 1.700
<span id="line1348"></span>    vp 1.300 1.700
<span id="line1349"></span>    curv2 13 14 15 16 13
<span id="line1350"></span>    parm u 0.00 1.00 2.00 3.00 4.00
<span id="line1351"></span>    end
<span id="line1352"></span>    # surface
<span id="line1353"></span>    v 0.000 0.000 0.000
<span id="line1354"></span>    v 1.000 0.000 0.000
<span id="line1355"></span>    v 0.000 1.000 0.000
<span id="line1356"></span>    v 1.000 1.000 0.000
<span id="line1357"></span>    deg 1 1
<span id="line1358"></span>    cstype bezier
<span id="line1359"></span>    surf 0.0 2.0 0.0 2.0 1 2 3 4
<span id="line1360"></span>    parm u 0.00 2.00
<span id="line1361"></span>    parm v 0.00 2.00
<span id="line1362"></span>    trim 0.0 4.0 1
<span id="line1363"></span>    hole 0.0 4.0 2
<span id="line1364"></span>    trim 0.0 4.0 3
<span id="line1365"></span>    hole 0.0 4.0 4
<span id="line1366"></span>    end
<span id="line1367"></span>
<span id="line1368"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>8.      Trimming with a special curve</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line1369"></span>
<span id="line1370"></span>This example is similar to the trimmed NURB surface example (6), except
<span id="line1371"></span>there is a special curve on the surface. This example uses negative
<span id="line1372"></span>vertex numbers.
<span id="line1373"></span>
<span id="line1374"></span>    # trimming curve
<span id="line1375"></span>    vp -0.675  1.850  3.000
<span id="line1376"></span>    vp  0.915  1.930
<span id="line1377"></span>    vp  2.485  0.470  2.000
<span id="line1378"></span>    vp  2.485 -1.030
<span id="line1379"></span>    vp  1.605 -1.890 10.700
<span id="line1380"></span>    vp -0.745 -0.654  0.500
<span id="line1381"></span>    cstype rat bezier
<span id="line1382"></span>    deg 3
<span id="line1383"></span>    curv2 -6 -5 -4 -3 -2 -1 -6
<span id="line1384"></span>    parm u 0.00 1.00 2.00
<span id="line1385"></span>    end
<span id="line1386"></span>    # special curve
<span id="line1387"></span>    vp -0.185  0.322
<span id="line1388"></span>    vp  0.214  0.818
<span id="line1389"></span>    vp  1.652  0.207
<span id="line1390"></span>    vp  1.652 -0.455
<span id="line1391"></span>    curv2 -4 -3 -2 -1
<span id="line1392"></span>    parm u 2.00 10.00
<span id="line1393"></span>    end
<span id="line1394"></span>    # surface
<span id="line1395"></span>    v -1.350 -1.030 0.000
<span id="line1396"></span>    v  0.130 -1.030 0.432 7.600
<span id="line1397"></span>    v  1.480 -1.030 0.000 2.300
<span id="line1398"></span>    v -1.460  0.060 0.201
<span id="line1399"></span>    v  0.120  0.060 0.915 0.500
<span id="line1400"></span>    v  1.380  0.060 0.454 1.500
<span id="line1401"></span>    v -1.480  1.030 0.000 2.300
<span id="line1402"></span>    v  0.120  1.030 0.394 6.100
<span id="line1403"></span>    v  1.170  1.030 0.000 3.300
<span id="line1404"></span>    cstype rat bspline
<span id="line1405"></span>    deg 2 2
<span id="line1406"></span>    surf -1.0 2.5 -2.0 2.0 -9 -8 -7 -6 -5 -4 -3 -2 -1
<span id="line1407"></span>    parm u -1.00 -1.00 -1.00 2.50 2.50 2.50
<span id="line1408"></span>    parm v -2.00 -2.00 -2.00 2.00 2.00 2.00
<span id="line1409"></span>    trim 0.0 2.0 1
<span id="line1410"></span>    scrv 4.2 9.7 2
<span id="line1411"></span>    end
<span id="line1412"></span>
<span id="line1413"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>9.      Trimming with special points</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line1414"></span>
<span id="line1415"></span>This example extends the trimmed NURB surface example (6) to include
<span id="line1416"></span>special points on both the trimming curve and surface. A space curve
<span id="line1417"></span>with a special point is also included. This example uses negative
<span id="line1418"></span>vertex numbers.
<span id="line1419"></span>
<span id="line1420"></span>    # special point and space curve data
<span id="line1421"></span>    vp 0.500
<span id="line1422"></span>    vp 0.700
<span id="line1423"></span>    vp 1.100
<span id="line1424"></span>    vp 0.200 0.950
<span id="line1425"></span>    v  0.300 1.500 0.100
<span id="line1426"></span>    v  0.000  0.000  0.000
<span id="line1427"></span>    v  1.000  1.000  0.000
<span id="line1428"></span>    v  2.000  1.000  0.000
<span id="line1429"></span>    v  3.000  0.000  0.000
<span id="line1430"></span>    cstype bezier
<span id="line1431"></span>    deg 3
<span id="line1432"></span>    curv 0.2 0.9 -4 -3 -2 -1
<span id="line1433"></span>    sp 1
<span id="line1434"></span>    parm u 0.00 1.00
<span id="line1435"></span>    end
<span id="line1436"></span>    # trimming curve
<span id="line1437"></span>    vp -0.675  1.850  3.000
<span id="line1438"></span>    vp  0.915  1.930
<span id="line1439"></span>    vp  2.485  0.470  2.000
<span id="line1440"></span>    vp  2.485 -1.030
<span id="line1441"></span>    vp  1.605 -1.890 10.700
<span id="line1442"></span>    vp -0.745 -0.654  0.500
<span id="line1443"></span>    cstype rat bezier
<span id="line1444"></span>    curv2 -6 -5 -4 -3 -2 -1 -6
<span id="line1445"></span>    parm u 0.00 1.00 2.00
<span id="line1446"></span>    sp 2 3
<span id="line1447"></span>    end
<span id="line1448"></span>    # surface
<span id="line1449"></span>    v -1.350 -1.030 0.000
<span id="line1450"></span>    v  0.130 -1.030 0.432 7.600
<span id="line1451"></span>    v  1.480 -1.030 0.000 2.300
<span id="line1452"></span>    v -1.460  0.060 0.201
<span id="line1453"></span>    v  0.120  0.060 0.915 0.500
<span id="line1454"></span>    v  1.380  0.060 0.454 1.500
<span id="line1455"></span>    v -1.480  1.030 0.000 2.300
<span id="line1456"></span>    v  0.120  1.030 0.394 6.100
<span id="line1457"></span>    v  1.170  1.030 0.000 3.300
<span id="line1458"></span>    cstype rat bspline
<span id="line1459"></span>    deg 2 2
<span id="line1460"></span>    surf -1.0 2.5 -2.0 2.0 -9 -8 -7 -6 -5 -4 -3 -2 -1
<span id="line1461"></span>    parm u -1.00 -1.00 -1.00 2.50 2.50 2.50
<span id="line1462"></span>    parm v -2.00 -2.00 -2.00 2.00 2.00 2.00
<span id="line1463"></span>    trim 0.0 2.0 1
<span id="line1464"></span>    sp 4
<span id="line1465"></span>    end
<span id="line1466"></span>
<span id="line1467"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Connectivity between free-form surfaces</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line1468"></span>
<span id="line1469"></span>Connectivity connects two surfaces along their trimming curves.
<span id="line1470"></span>
<span id="line1471"></span>The con statement specifies the first surface with its trimming curve
<span id="line1472"></span>and the second surface with its trimming curve. This information is
<span id="line1473"></span>useful for edge merging. Without this surface and curve data,
<span id="line1474"></span>connectivity must be determined numerically at greater expense and with
<span id="line1475"></span>reduced accuracy using the mg statement.
<span id="line1476"></span>
<span id="line1477"></span>Connectivity between surfaces in different merging groups is ignored.
<span id="line1478"></span>Also, although connectivity which crosses points of C1 discontinuity in
<span id="line1479"></span>trimming curves is legal, it is not recommended. Instead, use two
<span id="line1480"></span>connectivity statements which meet at the point of discontinuity.
<span id="line1481"></span>
<span id="line1482"></span>The two curves and their starting and ending parameters should all map
<span id="line1483"></span>to the same curve and starting and ending points in object space.
<span id="line1484"></span>
<span id="line1485"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Syntax</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line1486"></span>
<span id="line1487"></span>con  surf_1  q0_1  q1_1   curv2d_1   surf_2  q0_2  q1_2  curv2d_2
<span id="line1488"></span>
<span id="line1489"></span>    Free-form geometry statement.
<span id="line1490"></span>
<span id="line1491"></span>    Specifies connectivity between two surfaces.
<span id="line1492"></span>
<span id="line1493"></span>    surf_1 is the index of the first surface.
<span id="line1494"></span>
<span id="line1495"></span>    q0_1 is the starting parameter for the curve referenced by
<span id="line1496"></span>    curv2d_1.
<span id="line1497"></span>
<span id="line1498"></span>    q1_1 is the ending parameter for the curve referenced by curv2d_1.
<span id="line1499"></span>
<span id="line1500"></span>    curv2d_1 is the index of a curve on the first surface. This curve
<span id="line1501"></span>    must have been previously defined with the curv2 statement.
<span id="line1502"></span>
<span id="line1503"></span>    surf_2 is the index of the second surface.
<span id="line1504"></span>
<span id="line1505"></span>    q0_2 is the starting parameter for the curve referenced by
<span id="line1506"></span>    curv2d_2.
<span id="line1507"></span>
<span id="line1508"></span>    q1_2 is the ending parameter for the curve referenced by curv2d_2.
<span id="line1509"></span>
<span id="line1510"></span>    curv2d_2 is the index of a curve on the second surface. This curve
<span id="line1511"></span>    must have been previously defined with the curv2 statement.
<span id="line1512"></span>
<span id="line1513"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Example</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line1514"></span>
<span id="line1515"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>1.      Connectivity between two surfaces</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line1516"></span>
<span id="line1517"></span>This example shows the connectivity between two surfaces with trimming
<span id="line1518"></span>curves.
<span id="line1519"></span>
<span id="line1520"></span>    cstype bezier
<span id="line1521"></span>    deg 1 1
<span id="line1522"></span>
<span id="line1523"></span>    v 0 0 0
<span id="line1524"></span>    v 1 0 0
<span id="line1525"></span>    v 0 1 0
<span id="line1526"></span>    v 1 1 0
<span id="line1527"></span>
<span id="line1528"></span>    vp 0 0
<span id="line1529"></span>    vp 1 0
<span id="line1530"></span>    vp 1 1
<span id="line1531"></span>    vp 0 1
<span id="line1532"></span>
<span id="line1533"></span>    curv2 1 2 3 4 1
<span id="line1534"></span>    parm u 0.0 1.0 2.0 3.0 4.0
<span id="line1535"></span>    end
<span id="line1536"></span>
<span id="line1537"></span>    surf 0.0 1.0 0.0 1.0 1 2 3 4
<span id="line1538"></span>    parm u 0.0 1.0
<span id="line1539"></span>    parm v 0.0 1.0
<span id="line1540"></span>    trim 0.0 4.0 1
<span id="line1541"></span>    end
<span id="line1542"></span>
<span id="line1543"></span>    v 1 0 0
<span id="line1544"></span>    v 2 0 0
<span id="line1545"></span>    v 1 1 0
<span id="line1546"></span>    v 2 1 0
<span id="line1547"></span>
<span id="line1548"></span>    surf 0.0 1.0 0.0 1.0 5 6 7 8
<span id="line1549"></span>    parm u 0.0 1.0
<span id="line1550"></span>    parm v 0.0 1.0
<span id="line1551"></span>    trim 0.0 4.0 1
<span id="line1552"></span>    end
<span id="line1553"></span>
<span id="line1554"></span>    con 1 2.0 2.0 1 2 4.0 3.0 1
<span id="line1555"></span>
<span id="line1556"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Grouping</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line1557"></span>
<span id="line1558"></span>There are four statements in the .obj file to help you manipulate groups
<span id="line1559"></span>of elements:
<span id="line1560"></span>
<span id="line1561"></span>o	Group name statements are used to organize collections of
<span id="line1562"></span>	elements and simplify data manipulation for operations in
<span id="line1563"></span>	Model.
<span id="line1564"></span>o	Smoothing group statements let you identify elements over which
<span id="line1565"></span>	normals are to be interpolated to give those elements a smooth,
<span id="line1566"></span>	non-faceted appearance.  This is a quick way to specify vertex
<span id="line1567"></span>	normals.
<span id="line1568"></span>o	Merging group statements are used to ideneify free-form elements
<span id="line1569"></span>	that should be inspected for adjacency detection.  You can also
<span id="line1570"></span>	use merging groups to exclude surfaces which are close enough to
<span id="line1571"></span>	be considered adjacent but should not be merged.
<span id="line1572"></span>o	Object name statements let you assign a name to an entire object
<span id="line1573"></span>	in a single file.
<span id="line1574"></span>
<span id="line1575"></span>All grouping statements are state-setting.  This means that once a
<span id="line1576"></span>group statement is set, it alpplies to all elements that follow
<span id="line1577"></span>until the next group statement.
<span id="line1578"></span>
<span id="line1579"></span>This portion of a sample file shows a single element which belongs to
<span id="line1580"></span>three groups.  The smoothing group is turned off.
<span id="line1581"></span>
<span id="line1582"></span>    g square thing all
<span id="line1583"></span>    s off
<span id="line1584"></span>    f 1 2 3 4
<span id="line1585"></span>
<span id="line1586"></span>This example shows two surfaces in merging group 1 with a merge
<span id="line1587"></span>resolution of 0.5.
<span id="line1588"></span>
<span id="line1589"></span>    mg 1 .5
<span id="line1590"></span>    surf 0.0 1.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
<span id="line1591"></span>    surf 0.0 1.0 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32
<span id="line1592"></span>
<span id="line1593"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Syntax</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line1594"></span>
<span id="line1595"></span>g group_name1 group_name2 . . .
<span id="line1596"></span>
<span id="line1597"></span>    Polygonal and free-form geometry statement.
<span id="line1598"></span>
<span id="line1599"></span>    Specifies the group name for the elements that follow it. You can
<span id="line1600"></span>    have multiple group names. If there are multiple groups on one
<span id="line1601"></span>    line, the data that follows belong to all groups. Group information
<span id="line1602"></span>    is optional.
<span id="line1603"></span>
<span id="line1604"></span>    group_name is the name for the group. Letters, numbers, and
<span id="line1605"></span>    combinations of letters and numbers are accepted for group names.
<span id="line1606"></span>    The default group name is default.
<span id="line1607"></span>
<span id="line1608"></span>s group_number
<span id="line1609"></span>
<span id="line1610"></span>    Polygonal and free-form geometry statement.
<span id="line1611"></span>
<span id="line1612"></span>    Sets the smoothing group for the elements that follow it. If you do
<span id="line1613"></span>    not want to use a smoothing group, specify off or a value of 0.
<span id="line1614"></span>
<span id="line1615"></span>    To display with smooth shading in Model and PreView, you must
<span id="line1616"></span>    create vertex normals after you have assigned the smoothing groups.
<span id="line1617"></span>    You can create vertex normals with the vn statement or with the
<span id="line1618"></span>    Model program.
<span id="line1619"></span>
<span id="line1620"></span>    To smooth polygonal geometry for rendering with Image, it is
<span id="line1621"></span>    sufficient to put elements in some smoothing group. However, vertex
<span id="line1622"></span>    normals override smoothing information for Image.
<span id="line1623"></span>
<span id="line1624"></span>    group_number is the smoothing group number. To turn off smoothing
<span id="line1625"></span>    groups, use a value of 0 or off. Polygonal elements use group
<span id="line1626"></span>    numbers to put elements in different smoothing groups. For
<span id="line1627"></span>    free-form surfaces, smoothing groups are either turned on or off;
<span id="line1628"></span>    there is no difference between values greater than 0.
<span id="line1629"></span>
<span id="line1630"></span>mg group_number res
<span id="line1631"></span>
<span id="line1632"></span>    Free-form geometry statement.
<span id="line1633"></span>
<span id="line1634"></span>    Sets the merging group and merge resolution for the free-form
<span id="line1635"></span>    surfaces that follow it. If you do not want to use a merging group,
<span id="line1636"></span>    specify off or a value of 0.
<span id="line1637"></span>
<span id="line1638"></span>    Adjacency detection is performed only within groups, never between
<span id="line1639"></span>    groups. Connectivity between surfaces in different merging groups
<span id="line1640"></span>    is not allowed. Surfaces in the same merging group are merged
<span id="line1641"></span>    together along edges that are within the distance res apart.
<span id="line1642"></span>
<span id="line1643"></span>    NOTE: Adjacency detection is an expensive numerical comparison
<span id="line1644"></span>    process.  It is best to restrict this process to as small a domain
<span id="line1645"></span>    as possible by using small merging groups.
<span id="line1646"></span>
<span id="line1647"></span>    group_number is the merging group number. To turn off adjacency
<span id="line1648"></span>    detection, use a value of 0 or off.
<span id="line1649"></span>
<span id="line1650"></span>    res is the maximum distance between two surfaces that will be
<span id="line1651"></span>    merged together. The resolution must be a value greater than 0.
<span id="line1652"></span>    This is a required argument only when using merging groups.
<span id="line1653"></span>
<span id="line1654"></span>o object_name
<span id="line1655"></span>
<span id="line1656"></span>    Polygonal and free-form geometry statement.
<span id="line1657"></span>
<span id="line1658"></span>    Optional statement; it is not processed by any Wavefront programs.
<span id="line1659"></span>    It specifies a user-defined object name for the elements defined
<span id="line1660"></span>    after this statement.
<span id="line1661"></span>
<span id="line1662"></span>    object_name is the user-defined object name. There is no default.
<span id="line1663"></span>
<span id="line1664"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Examples</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line1665"></span>
<span id="line1666"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>1.      Cube with group names</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line1667"></span>
<span id="line1668"></span>The following example is a cube with each of its faces placed in a
<span id="line1669"></span>separate group. In addition, all elements belong to the group cube.
<span id="line1670"></span>
<span id="line1671"></span>    v 0.000000 2.000000 2.000000
<span id="line1672"></span>    v 0.000000 0.000000 2.000000
<span id="line1673"></span>    v 2.000000 0.000000 2.000000
<span id="line1674"></span>    v 2.000000 2.000000 2.000000
<span id="line1675"></span>    v 0.000000 2.000000 0.000000
<span id="line1676"></span>    v 0.000000 0.000000 0.000000
<span id="line1677"></span>    v 2.000000 0.000000 0.000000
<span id="line1678"></span>    v 2.000000 2.000000 0.000000
<span id="line1679"></span>    # 8 vertices
<span id="line1680"></span>
<span id="line1681"></span>    g front cube
<span id="line1682"></span>    f 1 2 3 4
<span id="line1683"></span>    g back cube
<span id="line1684"></span>    f 8 7 6 5
<span id="line1685"></span>    g right cube
<span id="line1686"></span>    f 4 3 7 8
<span id="line1687"></span>    g top cube
<span id="line1688"></span>    f 5 1 4 8
<span id="line1689"></span>    g left cube
<span id="line1690"></span>    f 5 6 2 1
<span id="line1691"></span>    g bottom cube
<span id="line1692"></span>    f 2 6 7 3
<span id="line1693"></span>    # 6 elements
<span id="line1694"></span>
<span id="line1695"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>2.      Two adjoining squares with a smoothing group</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line1696"></span>
<span id="line1697"></span>This example shows two adjoining squares that share a common edge. The
<span id="line1698"></span>squares are placed in a smoothing group to ensure that their common
<span id="line1699"></span>edge will be smoothed when rendered with Image.
<span id="line1700"></span>
<span id="line1701"></span>    v 0.000000 2.000000 0.000000
<span id="line1702"></span>    v 0.000000 0.000000 0.000000
<span id="line1703"></span>    v 2.000000 0.000000 0.000000
<span id="line1704"></span>    v 2.000000 2.000000 0.000000
<span id="line1705"></span>    v 4.000000 0.000000 -1.255298
<span id="line1706"></span>    v 4.000000 2.000000 -1.255298
<span id="line1707"></span>    # 6 vertices
<span id="line1708"></span>
<span id="line1709"></span>    g all
<span id="line1710"></span>    s 1
<span id="line1711"></span>    f 1 2 3 4
<span id="line1712"></span>    f 4 3 5 6
<span id="line1713"></span>    # 2 elements
<span id="line1714"></span>
<span id="line1715"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>3.      Two adjoining squares with vertex normals</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line1716"></span>
<span id="line1717"></span>This example also shows two squares that share a common edge. Vertex
<span id="line1718"></span>normals have been added to the corners of each square to ensure that
<span id="line1719"></span>their common edge will be smoothed during display in Model and PreView
<span id="line1720"></span>and when rendered with Image.
<span id="line1721"></span>
<span id="line1722"></span>    v 0.000000 2.000000 0.000000
<span id="line1723"></span>    v 0.000000 0.000000 0.000000
<span id="line1724"></span>    v 2.000000 0.000000 0.000000
<span id="line1725"></span>    v 2.000000 2.000000 0.000000
<span id="line1726"></span>    v 4.000000 0.000000 -1.255298
<span id="line1727"></span>    v 4.000000 2.000000 -1.255298
<span id="line1728"></span>    vn 0.000000 0.000000 1.000000
<span id="line1729"></span>    vn 0.000000 0.000000 1.000000
<span id="line1730"></span>    vn 0.276597 0.000000 0.960986
<span id="line1731"></span>    vn 0.276597 0.000000 0.960986
<span id="line1732"></span>    vn 0.531611 0.000000 0.846988
<span id="line1733"></span>    vn 0.531611 0.000000 0.846988
<span id="line1734"></span>    # 6 vertices
<span id="line1735"></span>
<span id="line1736"></span>    # 6 normals
<span id="line1737"></span>
<span id="line1738"></span>    g all
<span id="line1739"></span>    s 1
<span id="line1740"></span>    f 1//1 2//2 3//3 4//4
<span id="line1741"></span>    f 4//4 3//3 5//5 6//6
<span id="line1742"></span>    # 2 elements
<span id="line1743"></span>
<span id="line1744"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>4.      Merging group</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line1745"></span>
<span id="line1746"></span>This example shows two Bezier surfaces that meet at a common edge. They
<span id="line1747"></span>have both been placed in the same merging group to ensure continuity at
<span id="line1748"></span>the edge where they meet. This prevents "cracks" from appearing along
<span id="line1749"></span>the seam between the two surfaces during rendering. Merging groups will
<span id="line1750"></span>be ignored during flat-shading, smooth-shading, and material shading of
<span id="line1751"></span>the surface.
<span id="line1752"></span>
<span id="line1753"></span>    v -4.949854 -5.000000 0.000000
<span id="line1754"></span>    v -4.949854 -1.666667 0.000000
<span id="line1755"></span>    v -4.949854 1.666667 0.000000
<span id="line1756"></span>    v -4.949854 5.000000 0.000000
<span id="line1757"></span>    v -1.616521 -5.000000 0.000000
<span id="line1758"></span>    v -1.616521 -1.666667 0.000000
<span id="line1759"></span>    v -1.616521 1.666667 0.000000
<span id="line1760"></span>    v -1.616521 5.000000 0.000000
<span id="line1761"></span>    v 1.716813 -5.000000 0.000000
<span id="line1762"></span>    v 1.716813 -1.666667 0.000000
<span id="line1763"></span>    v 1.716813 1.666667 0.000000
<span id="line1764"></span>    v 1.716813 5.000000 0.000000
<span id="line1765"></span>    v 5.050146 -5.000000 0.000000
<span id="line1766"></span>    v 5.050146 -1.666667 0.000000
<span id="line1767"></span>    v 5.050146 1.666667 0.000000
<span id="line1768"></span>    v 5.050146 5.000000 0.000000
<span id="line1769"></span>    v -15.015566 -4.974991 0.000000
<span id="line1770"></span>    v -15.015566 -1.641658 0.000000
<span id="line1771"></span>    v -15.015566 1.691675 0.000000
<span id="line1772"></span>    v -15.015566 5.025009 0.000000
<span id="line1773"></span>    v -11.682233 -4.974991 0.000000
<span id="line1774"></span>    v -11.682233 -1.641658 0.000000
<span id="line1775"></span>    v -11.682233 1.691675 0.000000
<span id="line1776"></span>    v -11.682233 5.025009 0.000000
<span id="line1777"></span>    v -8.348900 -4.974991 0.000000
<span id="line1778"></span>    v -8.348900 -1.641658 0.000000
<span id="line1779"></span>    v -8.348900 1.691675 0.000000
<span id="line1780"></span>    v -8.348900 5.025009 0.000000
<span id="line1781"></span>    v -5.015566 -4.974991 0.000000
<span id="line1782"></span>    v -5.015566 -1.641658 0.000000
<span id="line1783"></span>    v -5.015566 1.691675 0.000000
<span id="line1784"></span>    v -5.015566 5.025009 0.000000
<span id="line1785"></span>
<span id="line1786"></span>    mg 1 0.500000
<span id="line1787"></span>
<span id="line1788"></span>    cstype bezier
<span id="line1789"></span>    deg 3 3
<span id="line1790"></span>    surf 0.000000 1.000000 0.000000 1.000000 13 14 \
<span id="line1791"></span>    15 16 9 10 11 12 5 6 7 8 1 2 3 4
<span id="line1792"></span>    parm u 0.000000 1.000000
<span id="line1793"></span>    parm v 0.000000 1.000000
<span id="line1794"></span>    end
<span id="line1795"></span>    surf 0.000000 1.000000 0.000000 1.000000 29 30 31 32 25 26 27 28 21 22 \
<span id="line1796"></span>    23 24 17 18 19 20
<span id="line1797"></span>    parm u 0.000000 1.000000
<span id="line1798"></span>    parm v 0.000000 1.000000
<span id="line1799"></span>    end
<span id="line1800"></span>
<span id="line1801"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Display/render attributes</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line1802"></span>
<span id="line1803"></span>Display and render attributes describe how an object looks when
<span id="line1804"></span>displayed in Model and PreView or when rendered with Image.
<span id="line1805"></span>
<span id="line1806"></span>Some attributes apply to both free-form and polygonal geometry, such as
<span id="line1807"></span>material name and library, ray tracing, and shadow casting.
<span id="line1808"></span>Interpolation attributes apply only to polygonal geometry. Curve and
<span id="line1809"></span>surface resolutions are used for only free-form geometry.
<span id="line1810"></span>
<span id="line1811"></span>The following chart shows the display and render statements available
<span id="line1812"></span>for polygonal and free-form geometry.
<span id="line1813"></span>
<span id="line1814"></span>Table B1-1.     Display and render attributes
<span id="line1815"></span>
<span id="line1816"></span>polygonal only		polygonal or free-form	free-form only
<span id="line1817"></span>--------------		----------------------	--------------
<span id="line1818"></span>bevel			lod			ctech
<span id="line1819"></span>c_interp		usemtl			stech
<span id="line1820"></span>d_interp		mtllib
<span id="line1821"></span>			shadow_obj
<span id="line1822"></span>			trace_obj
<span id="line1823"></span>
<span id="line1824"></span>All display and render attribute statements are state-setting. This
<span id="line1825"></span>means that once an attribute statement is set, it applies to all
<span id="line1826"></span>elements that follow until it is reset to a different value.
<span id="line1827"></span>
<span id="line1828"></span>The following sample shows rendering and display statements for a face
<span id="line1829"></span>element.:
<span id="line1830"></span>
<span id="line1831"></span>    s 1
<span id="line1832"></span>    usemtl blue
<span id="line1833"></span>    usemap marble
<span id="line1834"></span>    f 1 2 3 4
<span id="line1835"></span>
<span id="line1836"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Syntax</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line1837"></span>
<span id="line1838"></span>The following syntax statements are listed by the type of geometry.
<span id="line1839"></span>First are statements for polygonal geometry. Second are statements for
<span id="line1840"></span>both free-form and polygonal geometry. Third are statements for
<span id="line1841"></span>free-form geometry only.
<span id="line1842"></span>
<span id="line1843"></span>bevel on/off
<span id="line1844"></span>
<span id="line1845"></span>    Polygonal geometry statement.
<span id="line1846"></span>
<span id="line1847"></span>    Sets bevel interpolation on or off. It works only with beveled
<span id="line1848"></span>    objects, that is, objects with sides separated by beveled faces.
<span id="line1849"></span>
<span id="line1850"></span>    Bevel interpolation uses normal vector interpolation to give an
<span id="line1851"></span>    illusion of roundness to a flat bevel. It does not affect the
<span id="line1852"></span>    smoothing of non-bevelled faces.
<span id="line1853"></span>
<span id="line1854"></span>    Bevel interpolation does not alter the geometry of the original
<span id="line1855"></span>    object.
<span id="line1856"></span>
<span id="line1857"></span>    on turns on bevel interpolation.
<span id="line1858"></span>
<span id="line1859"></span>    off turns off bevel interpolation. The default is off.
<span id="line1860"></span>
<span id="line1861"></span>    NOTE: Image cannot render bevel-interpolated elements that have
<span id="line1862"></span>    vertex normals.
<span id="line1863"></span>
<span id="line1864"></span>c_interp on/off
<span id="line1865"></span>
<span id="line1866"></span>    Polygonal geometry statement.
<span id="line1867"></span>
<span id="line1868"></span>    Sets color interpolation on or off.
<span id="line1869"></span>
<span id="line1870"></span>    Color interpolation creates a blend across the surface of a polygon
<span id="line1871"></span>    between the materials assigned to its vertices. This creates a
<span id="line1872"></span>    blending of colors across a face element.
<span id="line1873"></span>
<span id="line1874"></span>    To support color interpolation, materials must be assigned per
<span id="line1875"></span>    vertex, not per element. The illumination models for all materials
<span id="line1876"></span>    of vertices attached to the polygon must be the same. Color
<span id="line1877"></span>    interpolation applies to the values for ambient (Ka), diffuse (Kd),
<span id="line1878"></span>    specular (Ks), and specular highlight (Ns) material properties.
<span id="line1879"></span>
<span id="line1880"></span>    on turns on color interpolation.
<span id="line1881"></span>
<span id="line1882"></span>    off turns off color interpolation. The default is off.
<span id="line1883"></span>
<span id="line1884"></span>d_interp on/off
<span id="line1885"></span>
<span id="line1886"></span>    Polygonal geometry statement.
<span id="line1887"></span>
<span id="line1888"></span>    Sets dissolve interpolation on or off.
<span id="line1889"></span>
<span id="line1890"></span>    Dissolve interpolation creates an interpolation or blend across a
<span id="line1891"></span>    polygon between the dissolve (d) values of the materials assigned
<span id="line1892"></span>    to its vertices. This feature is used to create effects exhibiting
<span id="line1893"></span>    varying degrees of apparent transparency, as in glass or clouds.
<span id="line1894"></span>
<span id="line1895"></span>    To support dissolve interpolation, materials must be assigned per
<span id="line1896"></span>    vertex, not per element. All the materials assigned to the vertices
<span id="line1897"></span>    involved in the dissolve interpolation must contain a dissolve
<span id="line1898"></span>    factor command to specify a dissolve.
<span id="line1899"></span>
<span id="line1900"></span>    on turns on dissolve interpolation.
<span id="line1901"></span>
<span id="line1902"></span>    off turns off dissolve interpolation. The default is off.
<span id="line1903"></span>
<span id="line1904"></span>lod level
<span id="line1905"></span>
<span id="line1906"></span>    Polygonal and free-form geometry statement.
<span id="line1907"></span>
<span id="line1908"></span>    Sets the level of detail to be displayed in a PreView animation.
<span id="line1909"></span>    The level of detail feature lets you control which elements of an
<span id="line1910"></span>    object are displayed while working in PreView.
<span id="line1911"></span>
<span id="line1912"></span>    level is the level of detail to be displayed. When you set the
<span id="line1913"></span>    level of detail to 0 or omit the lod statement, all elements are
<span id="line1914"></span>    displayed.  Specifying an integer between 1 and 100 sets the level
<span id="line1915"></span>    of detail to be displayed when reading the .obj file.
<span id="line1916"></span>
<span id="line1917"></span>maplib filename1 filename2 . . .
<span id="line1918"></span>
<span id="line1919"></span>    This is a rendering identifier that specifies the map library file
<span id="line1920"></span>    for the texture map definitions set with the usemap identifier. You
<span id="line1921"></span>    can specify multiple filenames with maplib. If multiple filenames
<span id="line1922"></span>    are specified, the first file listed is searched first for the map
<span id="line1923"></span>    definition, the second file is searched next, and so on.
<span id="line1924"></span>
<span id="line1925"></span>    When you assign a map library using the Model program, Model allows
<span id="line1926"></span>    only one map library per .obj file. You can assign multiple
<span id="line1927"></span>    libraries using a text editor.
<span id="line1928"></span>
<span id="line1929"></span>    filename is the name of the library file where the texture maps are
<span id="line1930"></span>    defined. There is no default.
<span id="line1931"></span>
<span id="line1932"></span>usemap map_name/off
<span id="line1933"></span>
<span id="line1934"></span>    This is a rendering identifier that specifies the texture map name
<span id="line1935"></span>    for the element following it. To turn off texture mapping, specify
<span id="line1936"></span>    off instead of the map name.
<span id="line1937"></span>
<span id="line1938"></span>    If you specify texture mapping for a face without texture vertices,
<span id="line1939"></span>    the texture map will be ignored.
<span id="line1940"></span>
<span id="line1941"></span>    map_name is the name of the texture map.
<span id="line1942"></span>
<span id="line1943"></span>    off turns off texture mapping. The default is off.
<span id="line1944"></span>
<span id="line1945"></span>usemtl material_name
<span id="line1946"></span>
<span id="line1947"></span>    Polygonal and free-form geometry statement.
<span id="line1948"></span>
<span id="line1949"></span>    Specifies the material name for the element following it. Once a
<span id="line1950"></span>    material is assigned, it cannot be turned off; it can only be
<span id="line1951"></span>    changed.
<span id="line1952"></span>
<span id="line1953"></span>    material_name is the name of the material. If a material name is
<span id="line1954"></span>    not specified, a white material is used.
<span id="line1955"></span>
<span id="line1956"></span>mtllib filename1 filename2 . . .
<span id="line1957"></span>
<span id="line1958"></span>    Polygonal and free-form geometry statement.
<span id="line1959"></span>
<span id="line1960"></span>    Specifies the material library file for the material definitions
<span id="line1961"></span>    set with the usemtl statement. You can specify multiple filenames
<span id="line1962"></span>    with mtllib. If multiple filenames are specified, the first file
<span id="line1963"></span>    listed is searched first for the material definition, the second
<span id="line1964"></span>    file is searched next, and so on.
<span id="line1965"></span>
<span id="line1966"></span>    When you assign a material library using the Model program, only
<span id="line1967"></span>    one map library per .obj file is allowed. You can assign multiple
<span id="line1968"></span>    libraries using a text editor.
<span id="line1969"></span>
<span id="line1970"></span>    filename is the name of the library file that defines the
<span id="line1971"></span>    materials.  There is no default.
<span id="line1972"></span>
<span id="line1973"></span>shadow_obj filename
<span id="line1974"></span>
<span id="line1975"></span>    Polygonal and free-form geometry statement.
<span id="line1976"></span>
<span id="line1977"></span>    Specifies the shadow object filename. This object is used to cast
<span id="line1978"></span>    shadows for the current object. Shadows are only visible in a
<span id="line1979"></span>    rendered image; they cannot be seen using hardware shading. The
<span id="line1980"></span>    shadow object is invisible except for its shadow.
<span id="line1981"></span>
<span id="line1982"></span>    An object will cast shadows only if it has a shadow object. You can
<span id="line1983"></span>    use an object as its own shadow object. However, a simplified
<span id="line1984"></span>    version of the original object is usually preferable for shadow
<span id="line1985"></span>    objects, since shadow casting can greatly increase rendering time.
<span id="line1986"></span>
<span id="line1987"></span>    filename is the filename for the shadow object. You can enter any
<span id="line1988"></span>    valid object filename for the shadow object. The object file can be
<span id="line1989"></span>    an .obj or .mod file. If a filename is given without an extension,
<span id="line1990"></span>    an extension of .obj is assumed.
<span id="line1991"></span>
<span id="line1992"></span>    Only one shadow object can be stored in a file. If more than one
<span id="line1993"></span>    shadow object is specified, the last one specified will be used.
<span id="line1994"></span>
<span id="line1995"></span>trace_obj filename
<span id="line1996"></span>
<span id="line1997"></span>    Polygonal and free-form geometry statement.
<span id="line1998"></span>
<span id="line1999"></span>    Specifies the ray tracing object filename. This object will be used
<span id="line2000"></span>    in generating reflections of the current object on reflective
<span id="line2001"></span>    surfaces.  Reflections are only visible in a rendered image; they
<span id="line2002"></span>    cannot be seen using hardware shading.
<span id="line2003"></span>
<span id="line2004"></span>    An object will appear in reflections only if it has a trace object.
<span id="line2005"></span>    You can use an object as its own trace object. However, a
<span id="line2006"></span>    simplified version of the original object is usually preferable for
<span id="line2007"></span>    trace objects, since ray tracing can greatly increase rendering
<span id="line2008"></span>    time.
<span id="line2009"></span>
<span id="line2010"></span>    filename is the filename for the ray tracing object. You can enter
<span id="line2011"></span>    any valid object filename for the trace object. You can enter any
<span id="line2012"></span>    valid object filename for the shadow object. The object file can be
<span id="line2013"></span>    an .obj or .mod file. If a filename is given without an extension,
<span id="line2014"></span>    an extension of .obj is assumed.
<span id="line2015"></span>
<span id="line2016"></span>    Only one trace object can be stored in a file. If more than one is
<span id="line2017"></span>    specified, the last one is used.
<span id="line2018"></span>
<span id="line2019"></span>ctech  technique  resolution
<span id="line2020"></span>
<span id="line2021"></span>    Free-form geometry statement.
<span id="line2022"></span>
<span id="line2023"></span>    Specifies a curve approximation technique. The arguments specify
<span id="line2024"></span>    the technique and resolution for the curve.
<span id="line2025"></span>
<span id="line2026"></span>    You must select from one of the following three techniques.
<span id="line2027"></span>
<span id="line2028"></span>    ctech cparm res
<span id="line2029"></span>
<span id="line2030"></span>	Specifies a curve with constant parametric subdivision using
<span id="line2031"></span>	one resolution parameter. Each polynomial segment of the curve
<span id="line2032"></span>	is subdivided n times in parameter space, where n is the
<span id="line2033"></span>	resolution parameter multiplied by the degree of the curve.
<span id="line2034"></span>
<span id="line2035"></span>	res is the resolution parameter. The larger the value, the
<span id="line2036"></span>	finer the resolution. If res has a value of 0, each polynomial
<span id="line2037"></span>	curve segment is represented by a single line segment.
<span id="line2038"></span>
<span id="line2039"></span>    ctech cspace maxlength
<span id="line2040"></span>
<span id="line2041"></span>	Specifies a curve with constant spatial subdivision. The curve
<span id="line2042"></span>	is approximated by a series of line segments whose lengths in
<span id="line2043"></span>	real space are less than or equal to the maxlength.
<span id="line2044"></span>
<span id="line2045"></span>	maxlength is the maximum length of the line segments. The
<span id="line2046"></span>	smaller the value, the finer the resolution.
<span id="line2047"></span>
<span id="line2048"></span>    ctech curv maxdist maxangle
<span id="line2049"></span>
<span id="line2050"></span>	Specifies curvature-dependent subdivision using separate
<span id="line2051"></span>	resolution parameters for the maximum distance and the maximum
<span id="line2052"></span>	angle.
<span id="line2053"></span>
<span id="line2054"></span>	The curve is approximated by a series of line segments in which
<span id="line2055"></span>	1) the distance in object space between a line segment and the
<span id="line2056"></span>	actual curve must be less than the maxdist parameter and 2) the
<span id="line2057"></span>	angle in degrees between tangent vectors at the ends of a line
<span id="line2058"></span>	segment must be less than the maxangle parameter.
<span id="line2059"></span>
<span id="line2060"></span>	maxdist is the distance in real space between a line segment
<span id="line2061"></span>	and the actual curve.
<span id="line2062"></span>
<span id="line2063"></span>	maxangle is the angle (in degrees) between tangent vectors at
<span id="line2064"></span>	the ends of a line segment.
<span id="line2065"></span>
<span id="line2066"></span>	The smaller the values for maxdist and maxangle, the finer the
<span id="line2067"></span>	resolution.
<span id="line2068"></span>
<span id="line2069"></span>    NOTE: Approximation information for trimming, hole, and special
<span id="line2070"></span>    curves is stored in the corresponding surface. The ctech statement
<span id="line2071"></span>    for the surface is used, not the ctech statement applied to the
<span id="line2072"></span>    curv2 statement. Although untrimmed surfaces have no explicit
<span id="line2073"></span>    trimming loop, a loop is constructed which bounds the legal
<span id="line2074"></span>    parameter range. This implicit loop follows the same rules as any
<span id="line2075"></span>    other loop and is approximated according to the ctech information
<span id="line2076"></span>    for the surface.
<span id="line2077"></span>
<span id="line2078"></span>stech  technique  resolution
<span id="line2079"></span>
<span id="line2080"></span>    Free-form geometry statement.
<span id="line2081"></span>
<span id="line2082"></span>    Specifies a surface approximation technique. The arguments specify
<span id="line2083"></span>    the technique and resolution for the surface.
<span id="line2084"></span>
<span id="line2085"></span>    You must select from one of the following techniques:
<span id="line2086"></span>
<span id="line2087"></span>    stech cparma ures vres
<span id="line2088"></span>
<span id="line2089"></span>	Specifies a surface with constant parametric subdivision using
<span id="line2090"></span>	separate resolution parameters for the u and v directions. Each
<span id="line2091"></span>	patch of the surface is subdivided n times in parameter space,
<span id="line2092"></span>	where n is the resolution parameter multiplied by the degree of
<span id="line2093"></span>	the surface.
<span id="line2094"></span>
<span id="line2095"></span>	ures is the resolution parameter for the u direction.
<span id="line2096"></span>
<span id="line2097"></span>	vres is the resolution parameter for the v direction.
<span id="line2098"></span>
<span id="line2099"></span>	The larger the values for ures and vres, the finer the
<span id="line2100"></span>	resolution.  If you enter a value of 0 for both ures and vres,
<span id="line2101"></span>	each patch is approximated by two triangles.
<span id="line2102"></span>
<span id="line2103"></span>    stech cparmb uvres
<span id="line2104"></span>
<span id="line2105"></span>	Specifies a surface with constant parametric subdivision, with
<span id="line2106"></span>	refinement using one resolution parameter for both the u and v
<span id="line2107"></span>	directions.
<span id="line2108"></span>
<span id="line2109"></span>	An initial triangulation is performed using only the points on
<span id="line2110"></span>	the trimming curves. This triangulation is then refined until
<span id="line2111"></span>	all edges are of an appropriate length. The resulting triangles
<span id="line2112"></span>	are not oriented along isoparametric lines as they are in the
<span id="line2113"></span>	cparma technique.
<span id="line2114"></span>
<span id="line2115"></span>	uvres is the resolution parameter for both the u and v
<span id="line2116"></span>	directions.  The larger the value, the finer the resolution.
<span id="line2117"></span>
<span id="line2118"></span>    stech cspace maxlength
<span id="line2119"></span>
<span id="line2120"></span>	Specifies a surface with constant spatial subdivision.
<span id="line2121"></span>
<span id="line2122"></span>	The surface is subdivided in rectangular regions until the
<span id="line2123"></span>	length in real space of any rectangle edge is less than the
<span id="line2124"></span>	maxlength.  These rectangular regions are then triangulated.
<span id="line2125"></span>
<span id="line2126"></span>	maxlength is the length in real space of any rectangle edge.
<span id="line2127"></span>	The smaller the value, the finer the resolution.
<span id="line2128"></span>
<span id="line2129"></span>    stech curv maxdist maxangle
<span id="line2130"></span>
<span id="line2131"></span>	Specifies a surface with curvature-dependent subdivision using
<span id="line2132"></span>	separate resolution parameters for the maximum distance and the
<span id="line2133"></span>	maximum angle.
<span id="line2134"></span>
<span id="line2135"></span>	The surface is subdivided in rectangular regions until 1) the
<span id="line2136"></span>	distance in real space between the approximating rectangle and
<span id="line2137"></span>	the actual surface is less than the maxdist (approximately) and
<span id="line2138"></span>	2) the angle in degrees between surface normals at the corners
<span id="line2139"></span>	of the rectangle is less than the maxangle. Following
<span id="line2140"></span>	subdivision, the regions are triangulated.
<span id="line2141"></span>
<span id="line2142"></span>	maxdist is the distance in real space between the approximating
<span id="line2143"></span>	rectangle and the actual surface.
<span id="line2144"></span>
<span id="line2145"></span>	maxangle is the angle in degrees between surface normals at the
<span id="line2146"></span>	corners of the rectangle.
<span id="line2147"></span>
<span id="line2148"></span>	The smaller the values for maxdist and maxangle, the finer the
<span id="line2149"></span>	resolution.
<span id="line2150"></span>
<span id="line2151"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Examples</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2152"></span>
<span id="line2153"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>1.      Cube with materials</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2154"></span>
<span id="line2155"></span>This cube has a different material applied to each of its faces.
<span id="line2156"></span>
<span id="line2157"></span>    mtllib master.mtl
<span id="line2158"></span>
<span id="line2159"></span>    v 0.000000 2.000000 2.000000
<span id="line2160"></span>    v 0.000000 0.000000 2.000000
<span id="line2161"></span>    v 2.000000 0.000000 2.000000
<span id="line2162"></span>    v 2.000000 2.000000 2.000000
<span id="line2163"></span>    v 0.000000 2.000000 0.000000
<span id="line2164"></span>    v 0.000000 0.000000 0.000000
<span id="line2165"></span>    v 2.000000 0.000000 0.000000
<span id="line2166"></span>    v 2.000000 2.000000 0.000000
<span id="line2167"></span>    # 8 vertices
<span id="line2168"></span>
<span id="line2169"></span>    g front
<span id="line2170"></span>    usemtl red
<span id="line2171"></span>    f 1 2 3 4
<span id="line2172"></span>    g back
<span id="line2173"></span>    usemtl blue
<span id="line2174"></span>    f 8 7 6 5
<span id="line2175"></span>    g right
<span id="line2176"></span>    usemtl green
<span id="line2177"></span>    f 4 3 7 8
<span id="line2178"></span>    g top
<span id="line2179"></span>    usemtl gold
<span id="line2180"></span>    f 5 1 4 8
<span id="line2181"></span>    g left
<span id="line2182"></span>    usemtl orange
<span id="line2183"></span>    f 5 6 2 1
<span id="line2184"></span>    g bottom
<span id="line2185"></span>    usemtl purple
<span id="line2186"></span>    f 2 6 7 3
<span id="line2187"></span>    # 6 elements
<span id="line2188"></span>
<span id="line2189"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>2.      Cube casting a shadow</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2190"></span>
<span id="line2191"></span>In this example, the cube casts a shadow on the other objects when it
<span id="line2192"></span>is rendered with Image. The cube, which is stored in the file cube.obj,
<span id="line2193"></span>references itself as the shadow object.
<span id="line2194"></span>
<span id="line2195"></span>    mtllib master.mtl
<span id="line2196"></span>    shadow_obj cube.obj
<span id="line2197"></span>
<span id="line2198"></span>    v 0.000000 2.000000 2.000000
<span id="line2199"></span>    v 0.000000 0.000000 2.000000
<span id="line2200"></span>    v 2.000000 0.000000 2.000000
<span id="line2201"></span>    v 2.000000 2.000000 2.000000
<span id="line2202"></span>    v 0.000000 2.000000 0.000000
<span id="line2203"></span>    v 0.000000 0.000000 0.000000
<span id="line2204"></span>    v 2.000000 0.000000 0.000000
<span id="line2205"></span>    v 2.000000 2.000000 0.000000
<span id="line2206"></span>    # 8 vertices
<span id="line2207"></span>
<span id="line2208"></span>    g front
<span id="line2209"></span>    usemtl red
<span id="line2210"></span>    f 1 2 3 4
<span id="line2211"></span>    g back
<span id="line2212"></span>    usemtl blue
<span id="line2213"></span>    f 8 7 6 5
<span id="line2214"></span>    g right
<span id="line2215"></span>    usemtl green
<span id="line2216"></span>    f 4 3 7 8
<span id="line2217"></span>    g top
<span id="line2218"></span>    usemtl gold
<span id="line2219"></span>    f 5 1 4 8
<span id="line2220"></span>    g left
<span id="line2221"></span>    usemtl orange
<span id="line2222"></span>    f 5 6 2 1
<span id="line2223"></span>    g bottom
<span id="line2224"></span>    usemtl purple
<span id="line2225"></span>    f 2 6 7 3
<span id="line2226"></span>    # 6 elements
<span id="line2227"></span>
<span id="line2228"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>3.      Cube casting a reflection</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2229"></span>
<span id="line2230"></span>This cube casts its reflection on any reflective objects when it is
<span id="line2231"></span>rendered with Image. The cube, which is stored in the file cube.obj,
<span id="line2232"></span>references itself as the trace object.
<span id="line2233"></span>
<span id="line2234"></span>    mtllib master.mtl
<span id="line2235"></span>    trace_obj cube.obj
<span id="line2236"></span>
<span id="line2237"></span>    v 0.000000 2.000000 2.000000
<span id="line2238"></span>    v 0.000000 0.000000 2.000000
<span id="line2239"></span>    v 2.000000 0.000000 2.000000
<span id="line2240"></span>    v 2.000000 2.000000 2.000000
<span id="line2241"></span>    v 0.000000 2.000000 0.000000
<span id="line2242"></span>    v 0.000000 0.000000 0.000000
<span id="line2243"></span>    v 2.000000 0.000000 0.000000
<span id="line2244"></span>    v 2.000000 2.000000 0.000000
<span id="line2245"></span>    # 8 vertices
<span id="line2246"></span>
<span id="line2247"></span>    g front
<span id="line2248"></span>    usemtl red
<span id="line2249"></span>    f 1 2 3 4
<span id="line2250"></span>    g back
<span id="line2251"></span>    usemtl blue
<span id="line2252"></span>    f 8 7 6 5
<span id="line2253"></span>    g right
<span id="line2254"></span>    usemtl green
<span id="line2255"></span>    f 4 3 7 8
<span id="line2256"></span>    g top
<span id="line2257"></span>    usemtl gold
<span id="line2258"></span>    f 5 1 4 8
<span id="line2259"></span>    g left
<span id="line2260"></span>    usemtl orange
<span id="line2261"></span>    f 5 6 2 1
<span id="line2262"></span>    g bottom
<span id="line2263"></span>    usemtl purple
<span id="line2264"></span>    f 2 6 7 3
<span id="line2265"></span>    # 6 elements
<span id="line2266"></span>
<span id="line2267"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>4.      Texture-mapped square</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2268"></span>
<span id="line2269"></span>This example describes a 2 x 2 square. It is mapped with a 1 x 1 square
<span id="line2270"></span>texture. The texture is stretched to fit the square exactly.
<span id="line2271"></span>
<span id="line2272"></span>mtllib master.mtl
<span id="line2273"></span>
<span id="line2274"></span>v 0.000000 2.000000 0.000000
<span id="line2275"></span>v 0.000000 0.000000 0.000000
<span id="line2276"></span>v 2.000000 0.000000 0.000000
<span id="line2277"></span>v 2.000000 2.000000 0.000000
<span id="line2278"></span>vt 0.000000 1.000000 0.000000
<span id="line2279"></span>vt 0.000000 0.000000 0.000000
<span id="line2280"></span>vt 1.000000 0.000000 0.000000
<span id="line2281"></span>vt 1.000000 1.000000 0.000000
<span id="line2282"></span># 4 vertices
<span id="line2283"></span>
<span id="line2284"></span>usemtl wood
<span id="line2285"></span>f 1/1 2/2 3/3 4/4
<span id="line2286"></span># 1 element
<span id="line2287"></span>
<span id="line2288"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>5.      Approximation technique for a surface</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2289"></span>
<span id="line2290"></span>This example shows a B-spline surface which will be approximated using
<span id="line2291"></span>curvature-dependent subdivision specified by the stech command.
<span id="line2292"></span>
<span id="line2293"></span>    g bspatch
<span id="line2294"></span>    v -5.000000 -5.000000 -7.808327
<span id="line2295"></span>    v -5.000000 -1.666667 -7.808327
<span id="line2296"></span>    v -5.000000 1.666667 -7.808327
<span id="line2297"></span>    v -5.000000 5.000000 -7.808327
<span id="line2298"></span>    v -1.666667 -5.000000 -7.808327
<span id="line2299"></span>    v -1.666667 -1.666667 11.977780
<span id="line2300"></span>    v -1.666667 1.666667 11.977780
<span id="line2301"></span>    v -1.666667 5.000000 -7.808327
<span id="line2302"></span>    v 1.666667 -5.000000 -7.808327
<span id="line2303"></span>    v 1.666667 -1.666667 11.977780
<span id="line2304"></span>    v 1.666667 1.666667 11.977780
<span id="line2305"></span>    v 1.666667 5.000000 -7.808327
<span id="line2306"></span>    v 5.000000 -5.000000 -7.808327
<span id="line2307"></span>    v 5.000000 -1.666667 -7.808327
<span id="line2308"></span>    v 5.000000 1.666667 -7.808327
<span id="line2309"></span>    v 5.000000 5.000000 -7.808327
<span id="line2310"></span>    # 16 vertices
<span id="line2311"></span>
<span id="line2312"></span>    g bspatch
<span id="line2313"></span>    cstype bspline
<span id="line2314"></span>    stech curv 0.5 10.000000
<span id="line2315"></span>    deg 3 3
<span id="line2316"></span>    surf 0.000000 1.000000 0.000000 1.000000 13 14 \ 15 16 9 10 11 12 5 6 7
<span id="line2317"></span>    8 1 2 3 4
<span id="line2318"></span>    parm u -3.000000 -2.000000 -1.000000 0.000000  \
<span id="line2319"></span>    1.000000 2.000000 3.000000 4.000000
<span id="line2320"></span>    parm v -3.000000 -2.000000 -1.000000 0.000000  \
<span id="line2321"></span>    1.000000 2.000000 3.000000 4.000000
<span id="line2322"></span>    end
<span id="line2323"></span>    # 1 element
<span id="line2324"></span>
<span id="line2325"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>6.      Approximation technique for a curve</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2326"></span>
<span id="line2327"></span>This example shows a Bezier curve which will be approximated using
<span id="line2328"></span>constant parametric subdivision specified by the ctech command.
<span id="line2329"></span>
<span id="line2330"></span>    v -2.300000 1.950000 0.000000
<span id="line2331"></span>    v -2.200000 0.790000 0.000000
<span id="line2332"></span>    v -2.340000 -1.510000 0.000000
<span id="line2333"></span>    v -1.530000 -1.490000 0.000000
<span id="line2334"></span>    v -0.720000 -1.470000 0.000000
<span id="line2335"></span>    v -0.780000 0.230000 0.000000
<span id="line2336"></span>    v 0.070000 0.250000 0.000000
<span id="line2337"></span>    v 0.920000 0.270000 0.000000
<span id="line2338"></span>    v 0.800000 -1.610000 0.000000
<span id="line2339"></span>    v 1.620000 -1.590000 0.000000
<span id="line2340"></span>    v 2.440000 -1.570000 0.000000
<span id="line2341"></span>    v 2.690000 0.670000 0.000000
<span id="line2342"></span>    v 2.900000 1.980000 0.000000
<span id="line2343"></span>    # 13 vertices
<span id="line2344"></span>
<span id="line2345"></span>    g default
<span id="line2346"></span>    cstype bezier
<span id="line2347"></span>    ctech cparm 1.000000
<span id="line2348"></span>    deg 3
<span id="line2349"></span>    curv 0.000000 4.000000 1 2 3 4 5 6 7 8 9 10 \
<span id="line2350"></span>    11 12 13
<span id="line2351"></span>    parm u 0.000000 1.000000 2.000000 3.000000  \
<span id="line2352"></span>    4.000000
<span id="line2353"></span>    end
<span id="line2354"></span>    # 1 element
<span id="line2355"></span>
<span id="line2356"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Comments</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2357"></span>
<span id="line2358"></span>Comments can appear anywhere in an .obj file. They are used to annotate
<span id="line2359"></span>the file; they are not processed.
<span id="line2360"></span>
<span id="line2361"></span>Here is an example:
<span id="line2362"></span>
<span id="line2363"></span>    # this is a comment
<span id="line2364"></span>
<span id="line2365"></span>The Model program automatically inserts comments when it creates .obj
<span id="line2366"></span>files. For example, it reports the number of geometric vertices,
<span id="line2367"></span>texture vertices, and vertex normals in a file.
<span id="line2368"></span>
<span id="line2369"></span>    # 4 vertices
<span id="line2370"></span>    # 4 texture vertices
<span id="line2371"></span>    # 4 normals
<span id="line2372"></span>
<span id="line2373"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Mathematics for free-form curves/surfaces</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2374"></span>
<span id="line2375"></span>[I apologize but this section will make absolutely no sense whatsoever
<span id="line2376"></span> without the equations and diagrams and there was just no easy way to
<span id="line2377"></span> include them in a pure ASCII document.  You should probably just skip
<span id="line2378"></span> ahead to the section "Superseded statements."  -Jim]
<span id="line2379"></span>
<span id="line2380"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>General forms</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2381"></span>
<span id="line2382"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Rational and non-rational curves and surfaces</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2383"></span>
<span id="line2384"></span>In general, any non-rational curve segment may be written as:
<span id="line2385"></span>
<span id="line2386"></span>where
<span id="line2387"></span>
<span id="line2388"></span>K + 1    is the number of control points
<span id="line2389"></span>di       are the control points
<span id="line2390"></span>n        is the degree of the curve
<span id="line2391"></span>Ni,n(t)  are the degree n basis functions
<span id="line2392"></span>
<span id="line2393"></span>Extending this to the bivariate case, any non-rational surface patch
<span id="line2394"></span>may be written as:
<span id="line2395"></span>
<span id="line2396"></span>where:
<span id="line2397"></span>
<span id="line2398"></span>K1 + 1   is the number of control points in the u direction
<span id="line2399"></span>K2 + 1   is the number of control points in the v direction
<span id="line2400"></span>di,j     are the control points
<span id="line2401"></span>m        is the degree of the surface in the u direction
<span id="line2402"></span>n        is the degree of the surface in the v direction
<span id="line2403"></span>Ni,m(u)  are the degree m basis functions in the u direction
<span id="line2404"></span>Nj,n(v)  are the degree n basis functions in the v direction
<span id="line2405"></span>
<span id="line2406"></span>NOTE: The front of the surface is defined as the side where the u
<span id="line2407"></span>parameter increases to the right and the v parameter increases upward.
<span id="line2408"></span>
<span id="line2409"></span>We may extend this curve to the rational case as:
<span id="line2410"></span>
<span id="line2411"></span>where wi are the weights associated with the control points di.
<span id="line2412"></span>Similarly, a rational surface may be expressed as:
<span id="line2413"></span>
<span id="line2414"></span>where wi,j  are the weights associated with the control points di,j.
<span id="line2415"></span>
<span id="line2416"></span>NOTE: If a curve or surface in an .obj file is rational, it must use
<span id="line2417"></span>the rat option with the cstype statement and it requires some weight
<span id="line2418"></span>values for each control point.
<span id="line2419"></span>
<span id="line2420"></span>The weights for the rational form are given as a third control point
<span id="line2421"></span>coordinate (for trimming curves) or fourth coordinate (for space curves
<span id="line2422"></span>and surfaces). These weights are optional and default to 1.0 if not
<span id="line2423"></span>given.
<span id="line2424"></span>
<span id="line2425"></span>This default weight is only reasonable for curves and surfaces whose
<span id="line2426"></span>basis functions sum to 1.0, such as Bezier, Cardinal, and NURB. It does
<span id="line2427"></span>not make sense for Taylor and may or may not make sense for a
<span id="line2428"></span>representation given in basis-matrix form.
<span id="line2429"></span>
<span id="line2430"></span>For all forms other than B-spline, the final curve or surface is
<span id="line2431"></span>constructed by piecing together the individual curve segments or
<span id="line2432"></span>surface patches. A global parameter space is then defined over the
<span id="line2433"></span>entire composite curve or surface using the parameter vector given with
<span id="line2434"></span>the parm statement.
<span id="line2435"></span>
<span id="line2436"></span>The parameter vector for a curve is a list of p global parameter values
<span id="line2437"></span>{t1, . . . , tp}. If t1  t </span><span class="error" title="Falsches Zeichen nach “&lt;”. Wahrscheinliche Ursache: Unkodierte “&lt;”. Versuchen Sie es als “&amp;lt;” zu kodieren.">&lt; </span><span>ti+1 is a point in global parameter space,
<span id="line2438"></span>then:
<span id="line2439"></span>
<span id="line2440"></span>is the corresponding point in local parameter space for the ith
<span id="line2441"></span>polynomial segment. It is this t which is used when evaluating a given
<span id="line2442"></span>segment of the piecewise curve. For surfaces, this mapping from global
<span id="line2443"></span>to local parameter space is applied independently in both the u and v
<span id="line2444"></span>parametric directions.
<span id="line2445"></span>
<span id="line2446"></span>B-splines require a knot vector rather than a parameter vector,
<span id="line2447"></span>although this is also given with the parm statement. Refer to the
<span id="line2448"></span>description of B-splines below.
<span id="line2449"></span>
<span id="line2450"></span>The following discussion of each type is expressed in terms of the
<span id="line2451"></span>above definitions.
<span id="line2452"></span>
<span id="line2453"></span>NOTE: The maximum degree for all curve and surface types is currently
<span id="line2454"></span>set at 20, which is high enough for most purposes.
<span id="line2455"></span>
<span id="line2456"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Free-form curve and surface types</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2457"></span>
<span id="line2458"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>B-spline</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2459"></span>
<span id="line2460"></span>Type bspline specifies arbitrary degree non-uniform B-splines which are
<span id="line2461"></span>commonly referred to as NURBs in their rational form. The basis
<span id="line2462"></span>functions are defined by the Cox-deBoor recursion formulas as:
<span id="line2463"></span>
<span id="line2464"></span>and:
<span id="line2465"></span>
<span id="line2466"></span>where, by convention, 0/0 = 0.
<span id="line2467"></span>
<span id="line2468"></span>The xi  {x0, . . . ,xq} form a set known as the knot vector which is
<span id="line2469"></span>given by the parm statement. It is required that
<span id="line2470"></span>
<span id="line2471"></span>1.      xi  xi + 1,
<span id="line2472"></span>2.      x0 </span><span class="error" title="Falsches Zeichen nach “&lt;”. Wahrscheinliche Ursache: Unkodierte “&lt;”. Versuchen Sie es als “&amp;lt;” zu kodieren.">&lt; </span><span>xn + 1,
<span id="line2473"></span>3.      xq -n -1 </span><span class="error" title="Falsches Zeichen nach “&lt;”. Wahrscheinliche Ursache: Unkodierte “&lt;”. Versuchen Sie es als “&amp;lt;” zu kodieren.">&lt; </span><span>xq,
<span id="line2474"></span>4.      xi </span><span class="error" title="Falsches Zeichen nach “&lt;”. Wahrscheinliche Ursache: Unkodierte “&lt;”. Versuchen Sie es als “&amp;lt;” zu kodieren.">&lt; </span><span>xi + n for 0 </span><span class="error" title="Falsches Zeichen nach “&lt;”. Wahrscheinliche Ursache: Unkodierte “&lt;”. Versuchen Sie es als “&amp;lt;” zu kodieren.">&lt; </span><span>i </span><span class="error" title="Falsches Zeichen nach “&lt;”. Wahrscheinliche Ursache: Unkodierte “&lt;”. Versuchen Sie es als “&amp;lt;” zu kodieren.">&lt; </span><span>q - n - 1,
<span id="line2475"></span>5.      xn  t min </span><span class="error" title="Falsches Zeichen nach “&lt;”. Wahrscheinliche Ursache: Unkodierte “&lt;”. Versuchen Sie es als “&amp;lt;” zu kodieren.">&lt; </span><span>tmax  xK+ 1, where [tmin, tmax] is the parameter
<span id="line2476"></span>over which the B-spline is to be evaluated, and
<span id="line2477"></span>6.      K = q - n - 1.
<span id="line2478"></span>
<span id="line2479"></span>A knot is said to be of multiplicity r if its value is repeated r times
<span id="line2480"></span>in the knot vector. The second through fourth conditions above restrict
<span id="line2481"></span>knots to be of at most multiplicity n + 1 at the ends of the vector and
<span id="line2482"></span>at most n everywhere else.
<span id="line2483"></span>
<span id="line2484"></span>The last condition requires that the number of control points is equal
<span id="line2485"></span>to one less than the number of knots minus the degree. For surfaces,
<span id="line2486"></span>all of the above conditions apply independently for the u and v
<span id="line2487"></span>parametric directions.
<span id="line2488"></span>
<span id="line2489"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Bezier</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2490"></span>
<span id="line2491"></span>Type bezier specifies arbitrary degree Bezier curves and surfaces. This
<span id="line2492"></span>basis function is defined as:
<span id="line2493"></span>
<span id="line2494"></span>where:
<span id="line2495"></span>
<span id="line2496"></span>When using type bezier, the number of global parameter values given
<span id="line2497"></span>with the parm statement must be K/n + 1, where K is the number of
<span id="line2498"></span>control points. For surfaces, this requirement applies independently
<span id="line2499"></span>for the u and v parametric directions.
<span id="line2500"></span>
<span id="line2501"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Cardinal</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2502"></span>
<span id="line2503"></span>Type cardinal specifies a cubic, first derivative, continuous curve or
<span id="line2504"></span>surface. For curves, this interpolates all but the first and last
<span id="line2505"></span>control points. For surfaces, all but the first and last row and column
<span id="line2506"></span>of control points are interpolated.
<span id="line2507"></span>
<span id="line2508"></span>Cardinal splines, also known as Catmull-Rom splines, are best
<span id="line2509"></span>understood by considering the conversion from Cardinal to Bezier
<span id="line2510"></span>control points for a single curve segment:
<span id="line2511"></span>
<span id="line2512"></span>Here, the ci variables are the Cardinal control points and the bi
<span id="line2513"></span>variables are the Bezier control points. We see that the second and
<span id="line2514"></span>third Cardinal points are the beginning and ending points for the
<span id="line2515"></span>segment, respectively. Also, the beginning tangent lies along the
<span id="line2516"></span>vector from the first to the third point, and the ending tangent along
<span id="line2517"></span>the vector from the second to the last point.
<span id="line2518"></span>
<span id="line2519"></span>If we let Bi(t) be the cubic Bezier basis functions (i.e. what was
<span id="line2520"></span>given above for Bezier as Ni,n(t) with n = 3), then we may write the
<span id="line2521"></span>Cardinal basis functions as:
<span id="line2522"></span>
<span id="line2523"></span>Note that Cardinal splines are only defined for the cubic case.
<span id="line2524"></span>
<span id="line2525"></span>When using type cardinal, the number of global parameter values given
<span id="line2526"></span>with the parm statement must be K - n + 2, where K is the number of
<span id="line2527"></span>control points. For surfaces, this requirement applies independently
<span id="line2528"></span>for the u and v parametric directions.
<span id="line2529"></span>
<span id="line2530"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Taylor</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2531"></span>
<span id="line2532"></span>Type taylor specifies arbitrary degree Taylor polynomial curves and
<span id="line2533"></span>surfaces. The basis function is simply:
<span id="line2534"></span>
<span id="line2535"></span>NOTE: The control points in this case are the polynomial coefficients
<span id="line2536"></span>and have no obvious geometric significance.
<span id="line2537"></span>
<span id="line2538"></span>When using type taylor, the number of global parameter values given
<span id="line2539"></span>with the parm statement must be (K + 1)/(n + 1) + 1, where K is the
<span id="line2540"></span>number of control points. For surfaces, this requirement applies
<span id="line2541"></span>independently for the u and v parametric directions.
<span id="line2542"></span>
<span id="line2543"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Basis matrix</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2544"></span>
<span id="line2545"></span>Type bmatrix specifies general, arbitrary-degree curves defined through
<span id="line2546"></span>the use of a basis matrix rather than an explicit type such as Bezier.
<span id="line2547"></span>The basis functions are defined as:
<span id="line2548"></span>
<span id="line2549"></span>where the basis matrix is the bi,j. In order to make the matrix nature
<span id="line2550"></span>of this more obvious, we may also write:
<span id="line2551"></span>
<span id="line2552"></span>When constructing basis matrices, you should keep this definition in
<span id="line2553"></span>mind, as different authors write this in different ways. A more common
<span id="line2554"></span>matrix representation is:
<span id="line2555"></span>
<span id="line2556"></span>To use such matrices in the .obj file, simply transpose the matrix and
<span id="line2557"></span>reverse the column ordering.
<span id="line2558"></span>
<span id="line2559"></span>When using type basis, the number of global parameter values given with
<span id="line2560"></span>the parm statement must be (K - n)/s + 2, where K is the number of
<span id="line2561"></span>control points and s is the step size given with the step statement.
<span id="line2562"></span>For surfaces, this requirement applies independently for the u and v
<span id="line2563"></span>parametric directions.
<span id="line2564"></span>
<span id="line2565"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Surface vertex data</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2566"></span>
<span id="line2567"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Control points</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2568"></span>
<span id="line2569"></span>The control points for a surface consisting of a single patch are
<span id="line2570"></span>listed in the order i = 0 to K1 for j = 0, followed by i = 0 to K1 for
<span id="line2571"></span>j = 1, and so on until j = K2.
<span id="line2572"></span>
<span id="line2573"></span>For surfaces made up of many patches, which is the usual case, the
<span id="line2574"></span>control points are ordered as if the surface were a single large patch.
<span id="line2575"></span>For example, the control points for a bicubic Bezier surface consisting
<span id="line2576"></span>of four patches would be arranged as follows:
<span id="line2577"></span>
<span id="line2578"></span>where (m, n) is the global parameter space of the surface and the
<span id="line2579"></span>numbers indicate the ordering of the vertex indices in the surf
<span id="line2580"></span>statement.
<span id="line2581"></span>
<span id="line2582"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Texture vertices and texture mapping</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2583"></span>
<span id="line2584"></span>When texture vertices are not supplied, the original surface
<span id="line2585"></span>parameterization is used for texture mapping. However, if texture
<span id="line2586"></span>vertices are supplied, they are interpreted as additional information
<span id="line2587"></span>to be interpolated or approximated separately from, but using the same
<span id="line2588"></span>interpolation functions as the control vertices.
<span id="line2589"></span>
<span id="line2590"></span>That is, whereas the surface itself, in the non-rational case, was
<span id="line2591"></span>given in the section "Rational and non-rational curves and surfaces"
<span id="line2592"></span>as: the texture vertices are interpolated or approximated by:
<span id="line2593"></span>
<span id="line2594"></span>where ti,j are the texture vertices and the basis functions are the
<span id="line2595"></span>same as for S(u,v). It is T(u,v), rather than the surface
<span id="line2596"></span>parameterization (u,v), which is used when a texture map is applied.
<span id="line2597"></span>
<span id="line2598"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Vertex normals and normal mapping</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2599"></span>
<span id="line2600"></span>Vertex normals are treated exactly like texture vertices. When vertex
<span id="line2601"></span>normals are not supplied, the true surface normals are used. If vertex
<span id="line2602"></span>normals are supplied, they are calculated as:
<span id="line2603"></span>
<span id="line2604"></span>where qi,j are the vertex normals and the basis functions are the same
<span id="line2605"></span>as for S(u,v) and T(u,v).
<span id="line2606"></span>
<span id="line2607"></span>NOTE: Vertex normals do not affect the shape of the surface; they are
<span id="line2608"></span>simply associated with the triangle vertices in the final
<span id="line2609"></span>triangulation. As with faces, supplying vertex normals only affects
<span id="line2610"></span>lighting calculations for the surface.
<span id="line2611"></span>
<span id="line2612"></span>The treatment of both texture vertices and vertex normals in the case
<span id="line2613"></span>of rational surfaces is identical. It is important to notice that even
<span id="line2614"></span>when the surface S(u,v) is rational, the texture and normal surfaces,
<span id="line2615"></span>T(u,v) and Q(u,v), are not rational. This is because the control points
<span id="line2616"></span>(the texture vertices and vertex normals) are never rational.
<span id="line2617"></span>
<span id="line2618"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Curve and surface operations</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2619"></span>
<span id="line2620"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Special points</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2621"></span>
<span id="line2622"></span>The following equations give a more precise description of special
<span id="line2623"></span>points for space curves and discuss the extension to trimming curves
<span id="line2624"></span>and surfaces.
<span id="line2625"></span>
<span id="line2626"></span>Let C(t) be a space curve with the global parameter t. We can
<span id="line2627"></span>approximate this curve by a set of k-1 line segments which connect the
<span id="line2628"></span>points:
<span id="line2629"></span>
<span id="line2630"></span>for some set of k global parameter values {t1,...,tk}
<span id="line2631"></span>
<span id="line2632"></span>Given a special point ts in the parameter space of the curve
<span id="line2633"></span>(referenced by vp), we guarantee that ts  {t1, . . . ,tk}. More
<span id="line2634"></span>specifically, we approximate the curve by:
<span id="line2635"></span>
<span id="line2636"></span>where, at the point i where ts is inserted, we have ti  ts </span><span class="error" title="Falsches Zeichen nach “&lt;”. Wahrscheinliche Ursache: Unkodierte “&lt;”. Versuchen Sie es als “&amp;lt;” zu kodieren.">&lt; </span><span>ti+1.
<span id="line2637"></span>
<span id="line2638"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Special curves</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2639"></span>
<span id="line2640"></span>The following equations give a more precise description of a special
<span id="line2641"></span>curve.
<span id="line2642"></span>
<span id="line2643"></span>Let T(t) be a special curve with the global parameter t. We have:
<span id="line2644"></span>
<span id="line2645"></span>where (m,n) is a point in the global parameter space of a surface. We
<span id="line2646"></span>can approximate this curve by a set of k-1 line segments which connect
<span id="line2647"></span>the points:
<span id="line2648"></span>
<span id="line2649"></span>for some set of k global parameter values.
<span id="line2650"></span>
<span id="line2651"></span>Let S(m,n) be a surface with the global parameters m and n. We can
<span id="line2652"></span>approximate this surface by a triangulation of a set of p points.
<span id="line2653"></span>
<span id="line2654"></span>which lie on the surface. We further define E as the set of all edges
<span id="line2655"></span>such that ei,j  E implies that S(mi,ni) and S(mj,nj) are connected in
<span id="line2656"></span>the triangulation. Finally, we guarantee that there exists some subset
<span id="line2657"></span>of E:
<span id="line2658"></span>
<span id="line2659"></span>such that the points:
<span id="line2660"></span>
<span id="line2661"></span>are connected in the triangulation.
<span id="line2662"></span>
<span id="line2663"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Connectivity</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2664"></span>
<span id="line2665"></span>Recall that the syntax of the con statement is:
<span id="line2666"></span>
<span id="line2667"></span>con surf_1 q0_1 q1_1 curv2d_1 surf_2 q0_2 q1_2 curv2d_2
<span id="line2668"></span>
<span id="line2669"></span>If we let:
<span id="line2670"></span>
<span id="line2671"></span>T1(t1)  be the curve referenced by curv2d_1
<span id="line2672"></span>
<span id="line2673"></span>S1(m1, n1)      be the surface referenced by surf1 on which T1(t1) lies
<span id="line2674"></span>
<span id="line2675"></span>T2(t2)  be the curve referenced by curv2d_2
<span id="line2676"></span>
<span id="line2677"></span>S2(m2, n2)      be the surface referenced by surf2 on which T2(t2) lies
<span id="line2678"></span>
<span id="line2679"></span>then S1(T1(t1)), S2(T2(t2)) must be identical up to reparameterization.
<span id="line2680"></span>Moreover, it must be the case that:
<span id="line2681"></span>
<span id="line2682"></span>S1(T1(q0_1)) = S2(T2(q0_2))
<span id="line2683"></span>
<span id="line2684"></span>and:
<span id="line2685"></span>
<span id="line2686"></span>S1(T1(q1_1)) = S2(T2(q1_2))
<span id="line2687"></span>
<span id="line2688"></span>It is along the curve S1(T1(t1)) between t1 = q0_1 and t1 = q1_1, and
<span id="line2689"></span>the curve S2(T2(t2)) between t2 = q0_2 and t2 = q1_2 that the surface
<span id="line2690"></span>S1(m1, n1) is connected to the surface S2(m2, n2).
<span id="line2691"></span>
<span id="line2692"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Superseded statements</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2693"></span>
<span id="line2694"></span>The new .obj file format has eliminated the need for several patch and
<span id="line2695"></span>curve statements. These statements have been replaced by free-form
<span id="line2696"></span>geometry statements.
<span id="line2697"></span>
<span id="line2698"></span>In the 3.0 release, the following keywords have been superseded:
<span id="line2699"></span>
<span id="line2700"></span>o       bsp
<span id="line2701"></span>o       bzp
<span id="line2702"></span>o       cdc
<span id="line2703"></span>o       cdp
<span id="line2704"></span>o       res
<span id="line2705"></span>
<span id="line2706"></span>You can still read these statements in this version 3.0, however, the
<span id="line2707"></span>system will no longer write files in this format.
<span id="line2708"></span>
<span id="line2709"></span>This release is the last release that will read these statements. If
<span id="line2710"></span>you want to save any data from this format, read in the file and write
<span id="line2711"></span>it out. The system will convert the data to the new .obj format.
<span id="line2712"></span>
<span id="line2713"></span>For more information on the new syntax statements, see "Specifying
<span id="line2714"></span>free-form curves and surfaces."
<span id="line2715"></span>
<span id="line2716"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Syntax</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2717"></span>
<span id="line2718"></span>The following syntax statements are for the superseded keywords.
<span id="line2719"></span>
<span id="line2720"></span>bsp v1 v2 . . . v16
<span id="line2721"></span>
<span id="line2722"></span>    Specifies a B-spline patch. B-spline patches have sixteen control
<span id="line2723"></span>    points, defined as vertices. Only four of the control points are
<span id="line2724"></span>    distributed over the surface of the patch; the remainder are
<span id="line2725"></span>    distributed around the perimeter of the patch.
<span id="line2726"></span>
<span id="line2727"></span>    Patches must be tessellated in Model before they can be correctly
<span id="line2728"></span>    shaded or rendered.
<span id="line2729"></span>
<span id="line2730"></span>    v is the vertex number for a control point. Sixteen vertex numbers
<span id="line2731"></span>    are required. Positive values indicate absolute vertex numbers.
<span id="line2732"></span>    Negative values indicate relative vertex numbers.
<span id="line2733"></span>
<span id="line2734"></span>bzp v1 v2 . . . v16
<span id="line2735"></span>
<span id="line2736"></span>    Specifies a Bezier patch. Bezier patches have sixteen control
<span id="line2737"></span>    points, defined as vertices. The control points are distributed
<span id="line2738"></span>    uniformly over its surface.
<span id="line2739"></span>
<span id="line2740"></span>    Patches must be tessellated in Model before they can be correctly
<span id="line2741"></span>    shaded or rendered.
<span id="line2742"></span>
<span id="line2743"></span>    v is the vertex number for a control point. Sixteen vertex numbers
<span id="line2744"></span>    are required. Positive values indicate absolute vertex numbers.
<span id="line2745"></span>    Negative values indicate relative vertex numbers.
<span id="line2746"></span>
<span id="line2747"></span>cdc v1 v2 v3 v4 v5 . . .
<span id="line2748"></span>
<span id="line2749"></span>    Specifies a Cardinal curve. Cardinal curves have a minimum of four
<span id="line2750"></span>    control points, defined as vertices.
<span id="line2751"></span>
<span id="line2752"></span>    Cardinal curves cannot be correctly shaded or rendered. They can be
<span id="line2753"></span>    tessellated and then extruded in Model to create 3D shapes.
<span id="line2754"></span>
<span id="line2755"></span>    v is the vertex number for a control point. A minimum of four
<span id="line2756"></span>    vertex numbers are required. There is no limit on the maximum.
<span id="line2757"></span>    Positive values indicate absolute vertex numbers. Negative values
<span id="line2758"></span>    indicate relative vertex numbers.
<span id="line2759"></span>
<span id="line2760"></span>cdp v1 v2 v3 . . . v16
<span id="line2761"></span>
<span id="line2762"></span>    Specifies a Cardinal patch. Cardinal patches have sixteen control
<span id="line2763"></span>    points, defined as vertices. Four of the control points are
<span id="line2764"></span>    attached to the corners of the patch.
<span id="line2765"></span>
<span id="line2766"></span>    Patches must be tessellated in Model before they can be correctly
<span id="line2767"></span>    shaded or rendered.
<span id="line2768"></span>
<span id="line2769"></span>    v is the vertex number for a control point. Sixteen vertex numbers
<span id="line2770"></span>    are required. Positive values indicate absolute vertex numbers.
<span id="line2771"></span>    Negative values indicate relative vertex numbers.
<span id="line2772"></span>
<span id="line2773"></span>res useg vseg
<span id="line2774"></span>
<span id="line2775"></span>    Reference and display statement.
<span id="line2776"></span>
<span id="line2777"></span>    Sets the number of segments for Bezier, B-spline and Cardinal
<span id="line2778"></span>    patches that follow it.
<span id="line2779"></span>
<span id="line2780"></span>    useg is the number of segments in the u direction (horizontal or x
<span id="line2781"></span>    direction). The minimum setting is 3 and the maximum setting is
<span id="line2782"></span>    120.  The default is 4.
<span id="line2783"></span>
<span id="line2784"></span>    vseg is the number of segments in the v direction (vertical or y
<span id="line2785"></span>    direction). The minimum setting is 3 and the maximum setting is
<span id="line2786"></span>    120.  The default is 4.
<span id="line2787"></span>
<span id="line2788"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Comparison of 2.11 and 3.0 syntax</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2789"></span>
<span id="line2790"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Cardinal curve</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2791"></span>
<span id="line2792"></span>The following example shows the 2.11 syntax and the 3.0 syntax for the
<span id="line2793"></span>same Cardinal curve.
<span id="line2794"></span>
<span id="line2795"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>2.11 Cardinal curve</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2796"></span>
<span id="line2797"></span>    # 2.11 Cardinal Curve
<span id="line2798"></span>
<span id="line2799"></span>    v 2.570000 1.280000 0.000000
<span id="line2800"></span>    v 0.940000 1.340000 0.000000
<span id="line2801"></span>    v -0.670000 0.820000 0.000000
<span id="line2802"></span>    v -0.770000 -0.940000 0.000000
<span id="line2803"></span>    v 1.030000 -1.350000 0.000000
<span id="line2804"></span>    v 3.070000 -1.310000 0.000000
<span id="line2805"></span>    # 6 vertices
<span id="line2806"></span>
<span id="line2807"></span>    cdc 1 2 3 4 5 6
<span id="line2808"></span>
<span id="line2809"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>3.0 Cardinal curve</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2810"></span>
<span id="line2811"></span>    # 3.0 Cardinal curve
<span id="line2812"></span>
<span id="line2813"></span>    v 2.570000 1.280000 0.000000
<span id="line2814"></span>    v 0.940000 1.340000 0.000000
<span id="line2815"></span>    v -0.670000 0.820000 0.000000
<span id="line2816"></span>    v -0.770000 -0.940000 0.000000
<span id="line2817"></span>    v 1.030000 -1.350000 0.000000
<span id="line2818"></span>    v 3.070000 -1.310000 0.000000
<span id="line2819"></span>    # 6 vertices
<span id="line2820"></span>
<span id="line2821"></span>    cstype cardinal
<span id="line2822"></span>    deg 3
<span id="line2823"></span>    curv 0.000000 3.000000 1 2 3 4 5 6
<span id="line2824"></span>    parm u 0.000000 1.000000 2.000000 3.000000
<span id="line2825"></span>    end
<span id="line2826"></span>    # 1 element
<span id="line2827"></span>
<span id="line2828"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>Bezier patch</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2829"></span>
<span id="line2830"></span> The following example shows the 2.11 syntax and the 3.0 syntax for the
<span id="line2831"></span> same Bezier patch.
<span id="line2832"></span>
<span id="line2833"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>2.11 Bezier patch</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2834"></span>
<span id="line2835"></span>    # 2.11 Bezier Patch
<span id="line2836"></span>    v -5.000000 -5.000000 0.000000
<span id="line2837"></span>    v -5.000000 -1.666667 0.000000
<span id="line2838"></span>    v -5.000000 1.666667 0.000000
<span id="line2839"></span>    v -5.000000 5.000000 0.000000
<span id="line2840"></span>    v -1.666667 -5.000000 0.000000
<span id="line2841"></span>    v -1.666667 -1.666667 0.000000
<span id="line2842"></span>    v -1.666667 1.666667 0.000000
<span id="line2843"></span>    v -1.666667 5.000000 0.000000
<span id="line2844"></span>    v 1.666667 -5.000000 0.000000
<span id="line2845"></span>    v 1.666667 -1.666667 0.000000
<span id="line2846"></span>    v 1.666667 1.666667 0.000000
<span id="line2847"></span>    v 1.666667 5.000000 0.000000
<span id="line2848"></span>    v 5.000000 -5.000000 0.000000
<span id="line2849"></span>    v 5.000000 -1.666667 0.000000
<span id="line2850"></span>    v 5.000000 1.666667 0.000000
<span id="line2851"></span>    v 5.000000 5.000000 0.000000
<span id="line2852"></span>    # 16 vertices
<span id="line2853"></span>
<span id="line2854"></span>    bzp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
<span id="line2855"></span>    # 1 element
<span id="line2856"></span>
<span id="line2857"></span></span><span>&lt;<span class="start-tag">b</span>&gt;</span><span>3.0 Bezier patch</span><span>&lt;/<span class="end-tag">b</span>&gt;</span><span>
<span id="line2858"></span>
<span id="line2859"></span>    #   3.0 Bezier patch
<span id="line2860"></span>
<span id="line2861"></span>    v -5.000000 -5.000000 0.000000
<span id="line2862"></span>    v -5.000000 -1.666667 0.000000
<span id="line2863"></span>    v -5.000000 1.666667 0.000000
<span id="line2864"></span>    v -5.000000 5.000000 0.000000
<span id="line2865"></span>    v -1.666667 -5.000000 0.000000
<span id="line2866"></span>    v -1.666667 -1.666667 0.000000
<span id="line2867"></span>    v -1.666667 1.666667 0.000000
<span id="line2868"></span>    v -1.666667 5.000000 0.000000
<span id="line2869"></span>    v 1.666667 -5.000000 0.000000
<span id="line2870"></span>    v 1.666667 -1.666667 0.000000
<span id="line2871"></span>    v 1.666667 1.666667 0.000000
<span id="line2872"></span>    v 1.666667 5.000000 0.000000
<span id="line2873"></span>    v 5.000000 -5.000000 0.000000
<span id="line2874"></span>    v 5.000000 -1.666667 0.000000
<span id="line2875"></span>    v 5.000000 1.666667 0.000000
<span id="line2876"></span>    v 5.000000 5.000000 0.000000
<span id="line2877"></span>    # 16 vertices
<span id="line2878"></span>
<span id="line2879"></span>    cstype bezier
<span id="line2880"></span>    deg 3 3
<span id="line2881"></span>    surf 0.000000 1.000000 0.000000 1.000000 13 14 \
<span id="line2882"></span>    15 16 9 10 11 12 5 6 7 8 1 2 3 4
<span id="line2883"></span>    parm u 0.000000 1.000000
<span id="line2884"></span>    parm v 0.000000 1.000000
<span id="line2885"></span>    end
<span id="line2886"></span>    # 1 element</span><span>&lt;/<span class="end-tag">pre</span>&gt;</span><span>
<span id="line2887"></span>
<span id="line2888"></span></span><span>&lt;/<span class="end-tag">td</span>&gt;</span><span></span><span>&lt;/<span class="end-tag">tr</span>&gt;</span><span></span><span>&lt;/<span class="end-tag">table</span>&gt;</span><span></span><span>&lt;/<span class="end-tag">center</span>&gt;</span><span>
<span id="line2889"></span></span><span>&lt;/<span class="end-tag">body</span>&gt;</span><span>
<span id="line2890"></span></span><span>&lt;/<span class="end-tag">html</span>&gt;</span><span>
<span id="line2891"></span></span></pre><menu type="context" id="actions"><menuitem id="goToLine" label="Zu Zeile springen…" accesskey="L"></menuitem><menuitem id="wrapLongLines" label="Lange Zeilen umbrechen" type="checkbox"></menuitem><menuitem id="highlightSyntax" label="Syntax-Hervorhebung" type="checkbox" checked="true"></menuitem></menu></body></html>